<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>libreim</title>
        <description>Blog de la comunidad LibreIM</description>
        <link>http://libreim.github.io/blog</link>
        <atom:link href="http://libreim.github.io/blog/feed.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Apuntes de Álgebra II</title>
            <description>&lt;p&gt;En los repositorios de LibreIM se han añadido unos &lt;a href=&quot;https://github.com/libreim/apuntesalgebraii/blob/master/apuntesalgebraii/algebra2.pdf&quot;&gt;apuntes que se corresponden con el temario de la asignatura Álgebra II&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Las aportaciones para mejorar estos apuntes son bienvenidas. En particular, en el archivo pdf del repositorio se incluyen los teoremas de Sylow, que se perdieron en la versión del código latex. También son bienvenidas contribuciones que completen las demostraciones de los teoremas enunciados o amplíen el material existente.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/libreim/apuntesalgebraii/tree/master/apuntesalgebraii&quot;&gt;Enlace al repositorio&lt;/a&gt;&lt;/p&gt;
</description>
            <pubDate>Tue, 07 Feb 2017 00:00:00 +0000</pubDate>
            <link>http://libreim.github.io/blog/2017/02/07/apuntes-de-lgebra-ii-en/</link>
            <guid isPermaLink="true">http://libreim.github.io/blog/2017/02/07/apuntes-de-lgebra-ii-en/</guid>
        </item>
        
        <item>
            <title>Mónadas</title>
            <description>&lt;blockquote&gt;
  &lt;p&gt;A monad is just a monoid in the category of endofunctors, what’s the problem?&lt;/p&gt;

  &lt;p&gt;– &lt;strong&gt;Philip Walder&lt;/strong&gt; (apócrifa) en &lt;em&gt;&lt;a href=&quot;http://james-iry.blogspot.com.es/2009/05/brief-incomplete-and-mostly-wrong.html&quot;&gt;A Brief, Incomplete, and Mostly Wrong 
   History of programming languages&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;prerrequisitos&quot;&gt;Prerrequisitos&lt;/h2&gt;

&lt;p&gt;Este artículo requiere un conocimiento previo de Haskell, o al menos,
de otro lenguaje de programación funcional. Puedes consultar
nuestra &lt;a href=&quot;http://tux.ugr.es/dgiim/blog/2014/10/01/intro-haskell/&quot;&gt;introducción a Haskell&lt;/a&gt; 
con recursos para iniciarte en el lenguaje.&lt;/p&gt;

&lt;p&gt;Por otro lado, para la segunda parte del artículo es recomendable
conocimiento previo sobre teoría de categorías. Aun así, no es
necesaria para leer la primera parte del artículo, donde hablamos
de mónadas sin hacer ninguna referencia explícita a la teoría de
categorías. Si quieres leer sobre ese tema, puedes consultar nuestros apuntes
de &lt;a href=&quot;http://tux.ugr.es/dgiim/blog/2014/10/04/intro-categorias/&quot;&gt;introducción a teoría de categorías&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;motivación-para-las-mónadas&quot;&gt;Motivación para las mónadas&lt;/h2&gt;

&lt;h3 id=&quot;mónadas-en-haskell&quot;&gt;Mónadas en Haskell&lt;/h3&gt;

&lt;p&gt;Imaginemos que necesitamos controlar cuando una función interna
devuelve un error, o cuando usa un estado que debe ser pasado al resto
de funciones. Cuando trabajamos con programación funcional pura,
debemos devolver explícitamente el error (señalar cómo va a tratarlo
cada función) o pasar el estado como argumento a cada una de las
funciones; así que una solución sería modificar cada una de las
funciones que usamos para que tenga en cuenta ese estado o ese caso de
error, pero esto añadiría mucha complejidad innecesaria a nuestro
código. La estructura de mónada simplifica esta escritura.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;El siguiente ejemplo, en el que tratamos el manejo de errores encapsulado
en una mónada, está inspirado en los ejemplos de:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://homepages.inf.ed.ac.uk/wadler/papers/marktoberdorf/baastad.pdf&quot;&gt;Monads for functional programming&lt;/a&gt; - &lt;em&gt;Philip Wadler&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Que es una muy buena introducción al uso de las mónadas en programación
funcional.&lt;/p&gt;

&lt;h3 id=&quot;calculando-raíces-cuadradas&quot;&gt;Calculando raíces cuadradas&lt;/h3&gt;
&lt;p&gt;Por ejemplo, supongamos que intentamos sacar raíces cuadradas en los reales usando
el &lt;a href=&quot;https://en.wikipedia.org/wiki/Integer_square_root#Algorithm&quot;&gt;método de Newton&lt;/a&gt;. 
Si intentamos calcular &lt;script type=&quot;math/tex&quot;&gt;\sqrt{n}&lt;/script&gt;, podemos tomar a cada paso la aproximación:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;x_{k+1} = \frac{1}{2}\left( x_k+\frac{n}{x_k} \right)&lt;/script&gt;

&lt;p&gt;Y parar cuando estemos suficientemente cerca (más cerca que un ε dado):&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
|x_{k+1} - x_k| &lt; \varepsilon %]]&gt;&lt;/script&gt;

&lt;p&gt;Escribimos una implementación de ese concepto de convergencia para listas infinitas en Haskell
y del método de Newton, basado en la función &lt;a href=&quot;http://hackage.haskell.org/package/base-4.9.0.0/docs/Prelude.html#v:iterate&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;iterate&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherwise&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;newtonaprox&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;newtonaprox&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sqroot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sqroot&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sqroot&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.03&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newtonaprox&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ahora imaginemos que usamos esta raíz cuadrada recién definida para solucionar una ecuación
de segundo grado &lt;script type=&quot;math/tex&quot;&gt;x^2 + bx + c = 0&lt;/script&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;x = \frac{-b \pm \sqrt{b^2 - 4c}}{2}&lt;/script&gt;

&lt;p&gt;Podemos definir una estructura de datos &lt;code class=&quot;highlighter-rouge&quot;&gt;QPol&lt;/code&gt; para el polinomio y una
función que lo resuelva obteniendo sus dos raíces:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QPol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QPol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QPol&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Qpol&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;x² + &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;x + &quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QPol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;QPol&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sol1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sol2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sol1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqroot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sol2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqroot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Y podemos comprobar que funciona:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; pol = QPol 1 (-5) 6
λ&amp;gt; putStrLn $ &quot;Las soluciones de &quot; ++ show pol ++ &quot; son &quot; ++ solve pol
Las soluciones de 1.0x² + -5.0x + 6.0 son (3.0,2.0)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;controlando-los-errores&quot;&gt;Controlando los errores&lt;/h3&gt;

&lt;p&gt;Pero ¿qué ocurre cuando intentamos calcular la raíz cuadrada de un número no positivo?
Este método no la encuentra, por lo que debería devolver un error antes de intentar
empezar a calcularla. La solución obvia es reflejar este error con un &lt;code class=&quot;highlighter-rouge&quot;&gt;Maybe&lt;/code&gt; en el
cálculo de la raíz cuadrada.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sqroot'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sqroot'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.03&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newtonsqrt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Esto lo soluciona, pero nos crea un problema mayor. La función &lt;code class=&quot;highlighter-rouge&quot;&gt;solve&lt;/code&gt; está usando la
raíz cuadrada y se espera de ella que devuelva un número, no un posible error. Si queremos
conseguir que funcione con la nueva &lt;code class=&quot;highlighter-rouge&quot;&gt;sqroot'&lt;/code&gt;, necesitaríamos implementar todas sus componentes
internas teniendo en cuenta ese error. Por ejemplo, deberíamos reescribir el &lt;code class=&quot;highlighter-rouge&quot;&gt;(+)&lt;/code&gt;, para tener
en cuenta errores y propagarlos por todos los cálculos involucrando a &lt;code class=&quot;highlighter-rouge&quot;&gt;sqroot'&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pero esto es muy pesado de implementar; deberíamos implementarlo ¡para
cada una de las operaciones que usen la raíz cuadrada en algún punto!
Esto obliga a cada una de nuestras operaciones intermedias a ser
conscientes de la posibilidad de error, dándonos código mucho menos
modular y reusable.&lt;/p&gt;

&lt;p&gt;Una solución ligeramente mejor es la de abstraer este proceso de hacer
a una función consciente de la posibilidad de error en una función
aparte y definir las demás en función suya:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;errorAware&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;errorAware&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;errorAware&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;errorAware&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorAware&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorAware&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Esto nos permite hacer cálculos con ellas:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; sqroot' (-3) +. Just 4
Nothing
λ&amp;gt; sqroot' 3 +. Just 4
Just 5.732143
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;la-mónada-maybe&quot;&gt;La mónada Maybe&lt;/h3&gt;

&lt;p&gt;Esta idea para simplificar el tratamiento de errores, realizada
correctamente, es lo que nos va a proporcionar la estructura de
mónada. En Haskell, podemos definir una mónada como:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;La idea intuitiva es que &lt;code class=&quot;highlighter-rouge&quot;&gt;(&amp;gt;&amp;gt;=)&lt;/code&gt; nos permite tomar una función que
puede devolver errores pero que no comprueba a la entrada si ha
recibido un error, es decir, de tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;(a -&amp;gt; Maybe b)&lt;/code&gt; ; y aplicarla
sobre una función que puede contener un error. La podríamos usar por
ejemplo para componer varias &lt;code class=&quot;highlighter-rouge&quot;&gt;sqroot'&lt;/code&gt;, que era algo que hasta ahora
no podíamos hacer sin tratar cada posible caso de error.  Y la función
&lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;, que en este caso es simplemente &lt;code class=&quot;highlighter-rouge&quot;&gt;Just&lt;/code&gt;, nos permite
considerar una constante como un posible error. Podemos calcular
fácilmente así &lt;script type=&quot;math/tex&quot;&gt;\sqrt{\sqrt{3}}&lt;/script&gt; teniendo en cuenta los casos de error:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sqroot'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqroot'&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;-- ¡Error de tipos!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sqroot'&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqroot'&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;-- Usando mónadas&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqroot'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqroot'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Usando Just&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqroot'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqroot'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Equivalente a lo anterior&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;notación-do&quot;&gt;Notación do&lt;/h3&gt;

&lt;p&gt;Las mónadas definen las funciones anteriores y muchas más que no vamos
a tratar ahora mismo, pero como resultado, nos acaban ofreciendo la
&lt;strong&gt;&lt;a href=&quot;https://en.wikibooks.org/wiki/Haskell/do_notation&quot;&gt;notación do&lt;/a&gt;&lt;/strong&gt;,
que es la que podemos usar para acabar escribiendo nuestra función
&lt;code class=&quot;highlighter-rouge&quot;&gt;solve&lt;/code&gt; como:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QPol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;QPol&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;discriminant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqroot'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;discriminant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;discriminant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;En la primera línea tenemos en cuenta que la función &lt;code class=&quot;highlighter-rouge&quot;&gt;sqroot&lt;/code&gt; puede
producir error, y en la segunda simplemente usamos el &lt;em&gt;posible&lt;/em&gt;
resultado de ella sin tener que preocuparnos por el resto de
funciones.&lt;/p&gt;

&lt;p&gt;Nótese que la notación &lt;strong&gt;do&lt;/strong&gt; es sólo una notación diseñada para
aliviar la escritura de operaciones con mónadas en algunos casos
particulares; es sólo &lt;em&gt;azúcar sintáctico&lt;/em&gt; para operaciones que no
dejan de ser puramente funcionales. Existen críticas al uso de esta
notación. &lt;sup id=&quot;fnref:do-notation-harmful&quot;&gt;&lt;a href=&quot;#fn:do-notation-harmful&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;mónadas-en-programación-funcional&quot;&gt;Mónadas en programación funcional&lt;/h2&gt;

&lt;h3 id=&quot;mónadas-como-clase-de-tipos&quot;&gt;Mónadas como clase de tipos&lt;/h3&gt;

&lt;p&gt;Las mónadas en Haskell están definidas como una clase de tipos
teniendo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Un &lt;strong&gt;constructor&lt;/strong&gt; de tipos &lt;code class=&quot;highlighter-rouge&quot;&gt;m :: * -&amp;gt; *&lt;/code&gt;, que para cada tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;,
devuelve una mónada conteniéndolo, &lt;code class=&quot;highlighter-rouge&quot;&gt;m a&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Una &lt;strong&gt;función&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;return :: a -&amp;gt; m a&lt;/code&gt;, que para todo elemento de tipo
&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;, devuelve una mónada que lo contiene.&lt;/li&gt;
  &lt;li&gt;Una &lt;strong&gt;función&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;(&amp;gt;&amp;gt;=) :: m a -&amp;gt; (a -&amp;gt; m b) -&amp;gt; m b&lt;/code&gt;, que dada una
mónada y una función que se aplique sobre su interior y devuelva
otra mónada, devuelve la mónada resultante. Sirve como composición
de funciones monádicas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La existencia de la última función equivale a la existencia de otras
dos funciones:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fmap :: (a -&amp;gt; b) -&amp;gt; m a -&amp;gt; m b
join :: m (m a) -&amp;gt; m a
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Nótese entonces que para ser mónada, una clase de tipos debe ser primero
un funtor. Dentro de los funtores que conocemos, podemos reconocer algunas
mónadas, incluyendo la mónada &lt;code class=&quot;highlighter-rouge&quot;&gt;Maybe&lt;/code&gt; que hemos usado hasta ahora:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- Return de la mónada Maybe&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- Bind de la mónada Maybe&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- Return de la mónada List&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- Bind de la mónada List&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Puedes empezar a leer tutoriales sobre el uso de las mónadas en
Haskell en:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://learnyouahaskell.com/a-fistful-of-monads&quot;&gt;A fistful of monads - Learn you a Haskell&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikibooks.org/wiki/Haskell/Understanding_monads&quot;&gt;Understanding monads - Wikibooks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mónada-lista&quot;&gt;Mónada lista&lt;/h3&gt;
&lt;p&gt;En las listas, por ejemplo, tenemos como candidato para &lt;code class=&quot;highlighter-rouge&quot;&gt;join :: [[a]] -&amp;gt; [a]&lt;/code&gt; 
la concatenación de listas, &lt;code class=&quot;highlighter-rouge&quot;&gt;concat&lt;/code&gt;. Nuestro &lt;code class=&quot;highlighter-rouge&quot;&gt;return :: a -&amp;gt; [a]&lt;/code&gt; será 
simplemente incluir un elemento en una lista que sólo lo contenga a él.&lt;/p&gt;

&lt;p&gt;En esta mónada, &lt;code class=&quot;highlighter-rouge&quot;&gt;(&amp;gt;&amp;gt;=)&lt;/code&gt; mapea una función &lt;code class=&quot;highlighter-rouge&quot;&gt;a -&amp;gt; [a]&lt;/code&gt; sobre cada
elemento de la lista y concatena todos los resultados:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; [1,2,3] &amp;gt;&amp;gt;= (replicate 3)
[1,1,1,2,2,2,3,3,3]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Nótese que, de la misma manera en la que podemos usar &lt;code class=&quot;highlighter-rouge&quot;&gt;(&amp;gt;&amp;gt;=)&lt;/code&gt;, podemos usar una versión con sus
parámetros cambiados de orden, &lt;code class=&quot;highlighter-rouge&quot;&gt;(=&amp;lt;&amp;lt;)&lt;/code&gt;. Aquí usamos la mónada lista para enumerar los racionales
repitiendo elementos:&lt;sup id=&quot;fnref:fpearls-rationals&quot;&gt;&lt;a href=&quot;#fn:fpearls-rationals&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.List&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Ratio&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- Crea los racionales con denominador n&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;withDenom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integral&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Rational&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;withDenom&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- Para cada entero, crea los racionales que lo&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- tienen como denominador&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rationalsDup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Rational&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rationalsDup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withDenom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- Evita duplicados con 'nub'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rationals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Rational&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rationals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rationalsDup&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;mónada-io&quot;&gt;Mónada IO&lt;/h3&gt;
&lt;p&gt;La mónada IO surge como una solución al problema de implementar
efectos secundarios (como la lectura o escritura) en un lenguaje puro
y de forma extensible, sin tener que alterar el sistema de tipos y
respetando el orden en el que queremos que se ejecuten.&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hola, &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getLine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pueden leerse más detalles sobre mónada IO y su implementación en:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://chris-taylor.github.io/blog/2013/02/09/io-is-not-a-side-effect/&quot;&gt;IO is pure&lt;/a&gt; - Chris Taylor&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/research/wp-content/uploads/1993/01/imperative.pdf&quot;&gt;Imperative functional programming&lt;/a&gt; - Simon L. Peyton Jones, Philip Wadler&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.jle.im/entry/first-class-statements&quot;&gt;First-Class “Statements”&lt;/a&gt; - Justin Le&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mónada-estado&quot;&gt;Mónada estado&lt;/h3&gt;
&lt;p&gt;En ocasiones necesitamos que nuestras funciones conserven un estado
además de realizar sus operaciones. Para esos casos existe la mónada
estado &lt;code class=&quot;highlighter-rouge&quot;&gt;State s&lt;/code&gt;, que guarda un valor de estado de tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;. Podemos
pensar en &lt;code class=&quot;highlighter-rouge&quot;&gt;State s a&lt;/code&gt; como &lt;code class=&quot;highlighter-rouge&quot;&gt;s -&amp;gt; (a,s)&lt;/code&gt;; es decir, un elemento dentro
de la mónada es una función dispuesta a tomar un estado inicial y a
devolver algún elemento junto a un estado final.&lt;/p&gt;

&lt;p&gt;Existen tutoriales sobre la mónada estado en:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.haskell.org/State_Monad&quot;&gt;State Monad - Haskell wiki&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://learnyouahaskell.com/for-a-few-monads-more&quot;&gt;For a few monads more - Learn you a Haskell&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://brandon.si/code/the-state-monad-a-tutorial-for-the-confused/&quot;&gt;The State Monad: a tutorial for the confused - Brandon Simmons&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://adit.io/posts/2013-06-10-three-useful-monads.html&quot;&gt;Three useful monads - Aditya Bhargava&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Un uso de la mónada estado puede ser el guardar la semilla de una
generación pseudoaleatoria de números usando
&lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_congruential_generator&quot;&gt;generadores lineales congruenciales&lt;/a&gt;.
En concreto, usaremos la fórmula iterativa &lt;script type=&quot;math/tex&quot;&gt;x_{i+1} \equiv 16807x_i \text{ mod } 2147483647&lt;/script&gt;, 
que se expone
&lt;a href=&quot;https://math.dartmouth.edu/archive/m20f11/public_html/RANDOMNESS_LCG.pdf&quot;&gt;aquí&lt;/a&gt;.
Con este generador podremos escribir dados de un número dado de caras
y llamarlos varias veces. El estado interno pasará la semilla
aleatoria de un dado al siguiente:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Control.Monad.State&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Seed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Seed&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dice&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16807&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2147483647&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Y podríamos llamarlo con la semilla &lt;code class=&quot;highlighter-rouge&quot;&gt;1000&lt;/code&gt; de la forma siguiente;
que nos devolverá por un lado el resultado de la tirada y por
otro lado la nueva semilla:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; runState (dice 6) 1000
(5,1660)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Si queremos hacer varias tiradas seguidas, podemos usar 
&lt;code class=&quot;highlighter-rouge&quot;&gt;replicateM :: Int -&amp;gt; m a -&amp;gt; m [a]&lt;/code&gt;, que se encarga de pasar 
internamente la semilla de cada tirada a la siguiente tirada:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; fst (runState (replicateM 100 (dice 6)) 1037)

[6,6,2,5,4,3,6,1,4,6,3,6,4,4,6,3,5,1,5,2,6,4,2,6,4,2,4,
5,1,6,5,4,1,3,5,4,6,4,2,3,4,2,1,1,6,5,5,4,1,1,4,6,5,3,6,
3,1,1,5,1,4,1,2,3,5,5,4,5,3,3,2,6,4,1,1,1,2,5,4,5,2,4,5,
6,1,2,4,3,3,6,4,6,3,4,5,1,4,2,2,2]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Incluso podemos crear nuevos generadores aleatorios a partir de los 
anteriores con las operaciones usuales:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;twodices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Seed&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;twodices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dice&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dice&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Cuando lo llamemos, tomará la distribución suma de las dos distribuciones 
de dados:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; fst (runState (replicateM 100 twodices) 1032)

[8,11,8,8,5,3,7,8,9,5,2,6,7,9,8,7,5,9,3,9,10,7,7,10,
8,2,5,6,4,10,8,6,4,6,4,8,9,7,12,11,9,3,2,7,5,5,6,10,
6,6,3,11,4,7,3,6,3,7,10,4,4,11,4,10,3,5,2,8,4,10,12,
8,9,5,9,11,6,4,10,6,6,12,5,2,7,8,7,4,4,4,9,6,6,6,3,
11,11,9,7,6]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;mónadas-en-teoría-de-categorías&quot;&gt;Mónadas en teoría de categorías&lt;/h2&gt;
&lt;p&gt;Para entender cómo funcionan las 
&lt;a href=&quot;https://es.wikipedia.org/wiki/M%C3%B3nada_(teor%C3%ADa_de_categor%C3%ADas)&quot;&gt;mónadas&lt;/a&gt; 
en teoría de categorías tenemos que entender dos conceptos: los 
&lt;em&gt;productos en una &lt;a href=&quot;https://es.wikipedia.org/wiki/Categor%C3%ADa_monoidal&quot;&gt;categoría monoidal&lt;/a&gt;&lt;/em&gt; y 
&lt;em&gt;los endofuntores de una categoría&lt;/em&gt;. La unión de ambos conceptos es lo que nos dará las mónadas 
como una construcción en teoría de categorías.&lt;/p&gt;

&lt;h3 id=&quot;categorías-monoidales&quot;&gt;Categorías monoidales&lt;/h3&gt;
&lt;p&gt;Simplificando, una categoría monoidal es aquella donde, dados dos objetos &lt;script type=&quot;math/tex&quot;&gt;A,B&lt;/script&gt;, tenemos
un objeto &lt;em&gt;“producto tensor”&lt;/em&gt; de ambos, &lt;script type=&quot;math/tex&quot;&gt;A \otimes B&lt;/script&gt;, donde además existe un objeto identidad &lt;script type=&quot;math/tex&quot;&gt;I&lt;/script&gt;
cumpliendo propiedades como:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A \otimes B \cong B \otimes A&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A \otimes (B \otimes C) \cong (A \otimes B) \otimes C&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A \otimes I \cong A&lt;/script&gt;

&lt;h3 id=&quot;ejemplos-de-categorías-monoidales&quot;&gt;Ejemplos de categorías monoidales&lt;/h3&gt;
&lt;p&gt;Los &lt;strong&gt;conjuntos&lt;/strong&gt; con el producto cartesiano y el conjunto de un elemento forman ya una categoría
monoidal. Puede comprobarse sobre ellos que existen los isomorfismos:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A \times B \cong B \times A&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A \times (B \times C) \cong (A \times B) \times C&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A \times \{\bullet\} \cong A&lt;/script&gt;

&lt;p&gt;Pero además, podemos darles &lt;em&gt;otra&lt;/em&gt; estructura de categoría monoidal, esta vez con la 
&lt;a href=&quot;https://es.wikipedia.org/wiki/Uni%C3%B3n_disjunta&quot;&gt;unión disjunta&lt;/a&gt; y el conjunto vacío:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A \sqcup B \cong B \sqcup A&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A \sqcup (B \sqcup C) \cong (A \sqcup B) \sqcup C&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A \sqcup \varnothing \cong A&lt;/script&gt;

&lt;p&gt;En general, &lt;strong&gt;todas las categorías con productos finitos son
categorías monoidales&lt;/strong&gt; con el producto categórico y el objeto
terminal como unidad. Todas las categorías con coproductos finitos son
categorías monoidales con el coproducto categórico y el objeto inicial
como unidad.&lt;/p&gt;

&lt;p&gt;Otro ejemplo distinto lo forman los &lt;strong&gt;espacios vectoriales&lt;/strong&gt; sobre un
cuerpo &lt;script type=&quot;math/tex&quot;&gt;K&lt;/script&gt; con el producto tensor y el propio cuerpo sirviendo como
unidad; o los &lt;strong&gt;grupos abelianos&lt;/strong&gt; con el producto tensor y
&lt;script type=&quot;math/tex&quot;&gt;\mathbb{Z}&lt;/script&gt; siendo la unidad.&lt;/p&gt;

&lt;h3 id=&quot;objetos-monoide&quot;&gt;Objetos monoide&lt;/h3&gt;
&lt;p&gt;Un objeto &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; de una categoría monoidal es objeto monoide cuando puedo
definir un morfismo desde el objeto identidad hacia él y un morfismo
desde el producto tensor &lt;script type=&quot;math/tex&quot;&gt;A \otimes A&lt;/script&gt; hacia él. Es decir, hay un
morfismo &lt;em&gt;cero&lt;/em&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;I \overset{0}\longrightarrow A&lt;/script&gt;

&lt;p&gt;Y un morfismo &lt;em&gt;multiplicación&lt;/em&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A \otimes A \overset{\mu}\longrightarrow A&lt;/script&gt;

&lt;p&gt;Cumpliendo ciertas propiedades similares a las que exigimos a un
monoide. De hecho, un objeto monoide en la categoría de los conjuntos
con el producto cartesiano es simplemente un &lt;strong&gt;monoide&lt;/strong&gt; normal y
corriente.&lt;/p&gt;

&lt;h3 id=&quot;categorías-de-endofuntores&quot;&gt;Categorías de endofuntores&lt;/h3&gt;
&lt;p&gt;El ejemplo que nos interesa ahora, sin embargo, es el de los
&lt;strong&gt;endofuntores&lt;/strong&gt; de una categoría.  Un &lt;strong&gt;funtor&lt;/strong&gt;, de forma
simplificada, es una &lt;em&gt;aplicación entre categorías&lt;/em&gt;; que lleva objetos
en objetos y morfismos en morfismos, respetando además el punto de
inicio y fin de cada morfismo.&lt;/p&gt;

&lt;p&gt;Si consideramos los funtores de una categoría a sí misma, tenemos los
&lt;strong&gt;endofuntores&lt;/strong&gt; de la categoría. Y entre ellos existen
transformaciones naturales que actúan como morfismos en el sentido de
que se componen para dar otras transformaciones naturales. Teniendo
unos objetos (los endofuntores), y unos morfismos (las
transformaciones naturales), tenemos una categoría. Nótese que hemos
abstraído mucho, estamos trabajando con una categoría en la que cada
objeto es en sí mismo un endofuntor y cada morfismo es toda una
transformación natural entre dos funtores.&lt;/p&gt;

&lt;p&gt;Esta es además una categoría monoidal. El producto tensor de esta
categoría monoidal será la composición &lt;script type=&quot;math/tex&quot;&gt;\circ&lt;/script&gt;, y el objeto identidad
el endofuntor identidad, que actúa dejando fijo cada objeto y cada
morfismo.&lt;/p&gt;

&lt;h3 id=&quot;mónadas&quot;&gt;Mónadas&lt;/h3&gt;
&lt;p&gt;Pues bien, una mónada es un objeto monoide en la categoría de los
endofuntores con la composición como producto tensor. Esto quiere
decir que es un endofuntor &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; con transformaciones naturales:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;F \circ F \Rightarrow F&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;I \Rightarrow F&lt;/script&gt;

&lt;p&gt;Como una transformación natural nos da un morfismo por cada objeto en
el que se aplica el funtor, lo que tenemos son familias de morfismos:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;F(F(X)) \overset{\mu_x}\longrightarrow F(X)&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;X \overset{r_x}\longrightarrow F(X)&lt;/script&gt;

&lt;h3 id=&quot;una-categoría-para-la-programación-funcional&quot;&gt;Una categoría para la programación funcional&lt;/h3&gt;
&lt;p&gt;Algunos sistemas de tipos, con las funciones entre ellos &lt;code class=&quot;highlighter-rouge&quot;&gt;A -&amp;gt; B&lt;/code&gt; como
morfismos, forman una categoría&lt;sup id=&quot;fnref:computational-trinitarianism&quot;&gt;&lt;a href=&quot;#fn:computational-trinitarianism&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. No es
el caso de Haskell, en el que, por varios motivos, sus tipos no forman
una categoría&lt;sup id=&quot;fnref:hask-not-a-category&quot;&gt;&lt;a href=&quot;#fn:hask-not-a-category&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;; pero las construcciones con
inspiración en la teoría de categorías toman el nombre de sus
homólogas.&lt;sup id=&quot;fnref:hask-matters&quot;&gt;&lt;a href=&quot;#fn:hask-matters&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;El primer ejemplo de esto son los &lt;strong&gt;funtores&lt;/strong&gt;. En Haskell, un funtor
se define como:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Es decir un funtor toma un tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; (un objeto de la categoría), y nos
devuelve otro tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;f a&lt;/code&gt; (otro objeto de la &lt;em&gt;misma&lt;/em&gt; categoría). Por
otro lado, el funtor toma un morfismo &lt;code class=&quot;highlighter-rouge&quot;&gt;a -&amp;gt; b&lt;/code&gt; y nos devuelve otro
morfismo &lt;code class=&quot;highlighter-rouge&quot;&gt;f a -&amp;gt; f b&lt;/code&gt;. Es decir, los funtores de la programación
funcional son &lt;strong&gt;endofuntores en la categoría de los tipos&lt;/strong&gt;, siempre
que conserven ciertas reglas que tienen su reflejo en las reglas de
funtores en Haskell.&lt;/p&gt;

&lt;h3 id=&quot;monoides-en-la-categoría-de-los-endofuntores&quot;&gt;Monoides en la categoría de los endofuntores&lt;/h3&gt;

&lt;p&gt;Entonces, si los funtores &lt;code class=&quot;highlighter-rouge&quot;&gt;f :: * -&amp;gt; *&lt;/code&gt; son endofuntores en alguna
categoría, tiene sentido cuestionarse cuáles de ellos son
monoides. Esto, junto con ciertas restricciones que se le imponen como
leyes a las mónadas, equivale a decir que existen los morfismos dados
por las transformaciones naturales que pedíamos antes, es decir, deben
existir morfismos de tipos &lt;code class=&quot;highlighter-rouge&quot;&gt;a -&amp;gt; m a&lt;/code&gt; y &lt;code class=&quot;highlighter-rouge&quot;&gt;m (m a) -&amp;gt; m a&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Así, a cualquier funtor que tiene estos dos morfismos, además del
&lt;code class=&quot;highlighter-rouge&quot;&gt;fmap&lt;/code&gt; que tenía por ser funtor, lo llamamos &lt;strong&gt;mónada&lt;/strong&gt;. Nótese que
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;=&lt;/code&gt; puede implementarse desde &lt;code class=&quot;highlighter-rouge&quot;&gt;join&lt;/code&gt; y viceversa, como:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Tenemos entonces dos definiciones equivalentes de lo que es una
mónada. Una desde la teoría de categorías y otra desde la teoría de
tipos y los lenguajes de programación funcional. Una visión desde 
las mónadas como monoides en la categoría de los endofuntores
desde dentro de Haskell puede verse 
&lt;a href=&quot;http://blog.sigfpe.com/2008/11/from-monoids-to-monads.html&quot;&gt;aquí&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;y-más&quot;&gt;Y más&lt;/h2&gt;
&lt;p&gt;Además de las enunciadas en este post, existen más otros temas
relevantes en relación a las mónadas, tanto en programación funcional
como en teoría de categorías:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://book.realworldhaskell.org/read/monad-transformers.html&quot;&gt;Transformadores de mónadas&lt;/a&gt;, usadas para componer mónadas.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/8428554/what-is-the-comonad-typeclass-in-haskell&quot;&gt;Comónadas&lt;/a&gt;, la noción dual de una mónada.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Kleisli_category&quot;&gt;Categorías de Kleisli&lt;/a&gt;, cada mónada da lugar a una categoría de Kleisli.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Adjoint_functors&quot;&gt;Funtores adjuntos&lt;/a&gt;, cada par de funtores adjuntos da lugar a una mónada.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cs.tufts.edu/comp/150FP/archive/brent-yorgey/tc.pdf&quot;&gt;Typeclassopedia&lt;/a&gt;, una revisión de otras clases de tipos relevantes en Haskell y relacionadas con la teoría de categorías.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;referencias&quot;&gt;Referencias&lt;/h2&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:do-notation-harmful&quot;&gt;
      &lt;p&gt;Peligros de la notación do. &lt;a href=&quot;https://wiki.haskell.org/Do_notation_considered_harmful&quot;&gt;Do notation considered harmful&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:do-notation-harmful&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fpearls-rationals&quot;&gt;
      &lt;p&gt;Enumerando los racionales. &lt;a href=&quot;http://www.cs.ox.ac.uk/people/jeremy.gibbons/publications/rationals.pdf&quot;&gt;Enumerating the rationals - J. Gibbons, D. Lester, R. Bird&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:fpearls-rationals&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:computational-trinitarianism&quot;&gt;
      &lt;p&gt;La correspondencia entre tipos, lógica y categorías. &lt;a href=&quot;https://ncatlab.org/nlab/show/computational+trinitarianism&quot;&gt;Computational Trinitarianism - NLab&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:computational-trinitarianism&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:hask-not-a-category&quot;&gt;
      &lt;p&gt;Por qué los tipos de Haskell no son una categoría. &lt;a href=&quot;http://math.andrej.com/2016/08/06/hask-is-not-a-category/&quot;&gt;Hask is not a category - Andrej Bauer&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:hask-not-a-category&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:hask-matters&quot;&gt;
      &lt;p&gt;Por qué en ocasiones puede ser útil pensar en ellos como una categoría. &lt;a href=&quot;https://ro-che.info/articles/2016-08-07-hask-category&quot;&gt;Does it matter if Hask is (not) a category?&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:hask-matters&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
            <pubDate>Wed, 21 Dec 2016 00:00:00 +0000</pubDate>
            <link>http://libreim.github.io/blog/2016/12/21/monadas/</link>
            <guid isPermaLink="true">http://libreim.github.io/blog/2016/12/21/monadas/</guid>
        </item>
        
        <item>
            <title>Apuntes para el doble grado</title>
            <description>&lt;h2 id=&quot;repositorio-de-apuntes&quot;&gt;Repositorio de apuntes&lt;/h2&gt;

&lt;p&gt;A iniciativa de los alumnos de segundo, hemos dejado público un repositorio de 
apuntes colectivo sobre las asignaturas del doble grado:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://libreim.github.io/apuntesDGIIM/&quot;&gt;ApuntesDGIIM - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Puedes descargar los apuntes, todavía en construcción, y con licencia Creative Commons en su
&lt;a href=&quot;https://libreim.github.io/apuntesDGIIM/&quot;&gt;página&lt;/a&gt;, que estará disponible desde 
&lt;a href=&quot;http://tux.ugr.es/dgiim/awesome/&quot;&gt;Awesome&lt;/a&gt;.&lt;/p&gt;
</description>
            <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
            <link>http://libreim.github.io/blog/2016/10/16/apuntes/</link>
            <guid isPermaLink="true">http://libreim.github.io/blog/2016/10/16/apuntes/</guid>
        </item>
        
        <item>
            <title>Aprendiendo Emacs</title>
            <description>&lt;h2 id=&quot;emacs&quot;&gt;Emacs&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;&lt;strong&gt;Emacs&lt;/strong&gt;&lt;/a&gt; es un editor de texto
construido sobre un intérprete del lenguaje
&lt;a href=&quot;https://es.wikipedia.org/wiki/Emacs_Lisp&quot;&gt;&lt;strong&gt;Elisp&lt;/strong&gt;&lt;/a&gt; para hacerlo extensible. Cada acción
del editor constituye un comando sobre el intérprete, por lo que podemos reescribir sus
comandos o crear nuevos comandos simplemente programando sobre el intérprete.&lt;/p&gt;

&lt;p class=&quot;fig med&quot;&gt;&lt;img src=&quot;https://github.com/libreim/blog/raw/gh-pages/images/emacs.png&quot; alt=&quot;&quot; /&gt;
Emacs editando este mismo artículo&lt;/p&gt;

&lt;p&gt;Emacs sirve como IDE para la mayoría de lenguajes de programación, como
editor para programación literaria y ciencia reproducible; se integra con git y
con el sistema de archivos, y tiene extensiones disponibles para usarse como
aplicación para organizar listas de tareas, leer el correo o servir como hoja
de cálculo.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I use Emacs, which might be thought of as a thermonuclear word processor.&lt;/p&gt;

  &lt;p&gt;– &lt;strong&gt;Neal Stephenson&lt;/strong&gt;, &lt;em&gt;In the Beginning… was the command line.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;En este artículo haré una referencia breve a todo lo que me ha ido sirviendo
para aprender Emacs mientras enlazo a fuentes que tratan cada uno de los temas
más extensamente. Como recursos generales para aprender Emacs, puedo recomendar:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLxj9UAX4Em-IiOfvF2Qs742LxEK4owSkr&quot;&gt;&lt;strong&gt;.Emacs Tutorials&lt;/strong&gt;&lt;/a&gt;
de &lt;em&gt;jekor&lt;/em&gt;, explican todo lo necesario para aprender
Emacs en 10 videotutoriales que pueden seguirse progresivamente.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PL8tzorAO7s0he-pp7Y_JDl7-Kz2Qlr_Pj&quot;&gt;&lt;strong&gt;Emacs Meetups&lt;/strong&gt;&lt;/a&gt;
de Thoughtbot, que profundizan sobre temas concretos de uso
de Emacs.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://emacsrocks.com/&quot;&gt;&lt;strong&gt;Emacs Rocks&lt;/strong&gt;&lt;/a&gt;, vídeos breves sobre casos concretos de uso de Emacs.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.emacswiki.org/emacs/SiteMap&quot;&gt;&lt;strong&gt;Emacs wiki&lt;/strong&gt;&lt;/a&gt;, una wiki que documenta
todo lo relacionado con Emacs.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sachachua.com/blog/category/geek/emacs/&quot;&gt;&lt;strong&gt;sachachua.com&lt;/strong&gt;&lt;/a&gt;,
donde se hace referencia periódicamente a noticias
de Emacs, y tiene escritas hojas de referencia de atajos de teclado de Emacs.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cestlaz.github.io/stories/emacs/&quot;&gt;&lt;strong&gt;C’est la z&lt;/strong&gt;&lt;/a&gt;, otro blog en el que se tratan temas relacionados con Emacs.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/emacs/manual/&quot;&gt;&lt;strong&gt;GNU Emacs&lt;/strong&gt;&lt;/a&gt;, la documentación oficial de Emacs.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://elbauldelprogramador.com/chuleta-atajos-teclado-emacs/&quot;&gt;&lt;strong&gt;El baúl del programador&lt;/strong&gt;&lt;/a&gt; ha empeazado
una recopilación colaborativa de los comandos y paquetes más útiles para Emacs.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;instalación&quot;&gt;Instalación&lt;/h3&gt;

&lt;p&gt;Emacs puede encontrarse en la mayoría de gestores de paquetes, pero puede no
estar en su versión más actualizada.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install emacs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Para escribir este artículo estoy usando &lt;code class=&quot;highlighter-rouge&quot;&gt;GNU Emacs 25.1&lt;/code&gt;, pero la última
versión estable es la &lt;strong&gt;24.5&lt;/strong&gt;. La versión estable actual puede descargarse desde
&lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;GNU&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;atajos-de-teclado&quot;&gt;Atajos de teclado&lt;/h2&gt;

&lt;p&gt;En Emacs se usa una &lt;a href=&quot;https://www.emacswiki.org/emacs/EmacsKeyNotation&quot;&gt;notación específica&lt;/a&gt;
para escribir un atajos de teclado.
La mayoría de documentación que consultes usará &lt;code class=&quot;highlighter-rouge&quot;&gt;C-x&lt;/code&gt; en lugar de &lt;code class=&quot;highlighter-rouge&quot;&gt;Control+x&lt;/code&gt;;
usará &lt;code class=&quot;highlighter-rouge&quot;&gt;C-x C-s&lt;/code&gt; para indicar que debes dejar pulsado &lt;code class=&quot;highlighter-rouge&quot;&gt;Control&lt;/code&gt; mientras pulsas
&lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; y &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;;
y por último, usará &lt;code class=&quot;highlighter-rouge&quot;&gt;M-x&lt;/code&gt;, donde la &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; se referirá a la tecla &lt;code class=&quot;highlighter-rouge&quot;&gt;Meta&lt;/code&gt;.
La tecla &lt;code class=&quot;highlighter-rouge&quot;&gt;Meta&lt;/code&gt; en Emacs se refiere normalmente a
dos opciones equivalentes, o bien pulsar &lt;code class=&quot;highlighter-rouge&quot;&gt;alt izq.&lt;/code&gt; mientras se pulsa &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;, o pulsar &lt;code class=&quot;highlighter-rouge&quot;&gt;Esc&lt;/code&gt; y luego pulsar
&lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;. En resumen:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Atajo&lt;/th&gt;
      &lt;th&gt;Descripción&lt;/th&gt;
      &lt;th&gt;Comando&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;C-n&lt;/td&gt;
      &lt;td&gt;Mantener control pulsado mientras se pulsa n&lt;/td&gt;
      &lt;td&gt;Next line&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;C-x C-s&lt;/td&gt;
      &lt;td&gt;Mantener control pulsado pulsando x y luego s&lt;/td&gt;
      &lt;td&gt;Save file&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;M-x&lt;/td&gt;
      &lt;td&gt;Mantener alt o pulsar esc para luego pulsar x&lt;/td&gt;
      &lt;td&gt;Execute Command&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RET&lt;/td&gt;
      &lt;td&gt;Salto de línea, pulsar enter antes de seguir&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Usar atajos de teclado facilita mucho usar Emacs rápidamente después del tiempo
de aprendizaje. &lt;sup id=&quot;fnref:emacs-productivo&quot;&gt;&lt;a href=&quot;#fn:emacs-productivo&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Cuando abras el programa por primera vez, te ofrecerá seguir un tutorial de Emacs
escrito en Emacs. El tutorial es muy útil para aprender a moverse dentro de
Emacs, pero la mayoría de lo que cuenta no es especialmente fácil de aprender
de una sola vez. Lo más chocante para un usuario nuevo puede ser el sistema de copiar-pegar;
que de forma muy simplificada se resume en: &lt;sup id=&quot;fnref:emacs-kill-buffer&quot;&gt;&lt;a href=&quot;#fn:emacs-kill-buffer&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;M-w&lt;/code&gt; copia.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C-w&lt;/code&gt; corta.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C-y&lt;/code&gt; pega.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pero si no te convence, puedes usar &lt;a href=&quot;https://www.emacswiki.org/emacs/CuaMode&quot;&gt;CUA Mode&lt;/a&gt;,
que te permite volver a usar &lt;code class=&quot;highlighter-rouge&quot;&gt;C-c&lt;/code&gt; y &lt;code class=&quot;highlighter-rouge&quot;&gt;C-v&lt;/code&gt; para copiar y pegar.
Otros comandos útiles de aprender antes de empezar con nada más son &lt;code class=&quot;highlighter-rouge&quot;&gt;C-x C-s&lt;/code&gt; para
guardar y &lt;code class=&quot;highlighter-rouge&quot;&gt;C-x C-f&lt;/code&gt; para abrir un archivo.&lt;/p&gt;

&lt;h3 id=&quot;documentación&quot;&gt;Documentación&lt;/h3&gt;

&lt;p&gt;Emacs es un editor autodocumentado, es decir, la documentación del editor puede consultarse
dentro del propio programa. Para llamar a la ayuda se puede pulsar &lt;code class=&quot;highlighter-rouge&quot;&gt;C-h ?&lt;/code&gt;, que nos
dejará elegir si necesitamos ayuda sobre comandos, atajos de teclados, variables,
licencias, etc. Especialmente útiles son:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C-h c &amp;lt;atajo de teclado&amp;gt;&lt;/code&gt; nos da el nombre de la función que se ejecuta al pulsar
esas teclas.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C-h f &amp;lt;nombre de función&amp;gt;&lt;/code&gt; documenta la función.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;buffers-y-ventanas&quot;&gt;Buffers y ventanas&lt;/h3&gt;

&lt;p&gt;Cada vez que abrimos un archivo, o pedimos un apartado de documentación, o abrimos
la configuración, se abre un nuevo buffer. Un &lt;a href=&quot;https://www.emacswiki.org/emacs/Buffer&quot;&gt;buffer&lt;/a&gt;
es el equivalente a un documento
o un espacio de trabajo en otros editores Podemos movernos entre los buffers
actualmente abiertos pulsando &lt;code class=&quot;highlighter-rouge&quot;&gt;C-x &amp;lt;left&amp;gt;&lt;/code&gt; o &lt;code class=&quot;highlighter-rouge&quot;&gt;C-x &amp;lt;right&amp;gt;&lt;/code&gt;; y podemos mostrar la
lista de buffers actualmente abiertos con &lt;code class=&quot;highlighter-rouge&quot;&gt;C-x C-b&lt;/code&gt; (¡en un nuevo buffer!).&lt;/p&gt;

&lt;p&gt;Además de los buffers que tengamos actualmente abiertos, tenemos ventanas que los
muestran. Podemos partir la pantalla de Emacs en varias ventanas con &lt;code class=&quot;highlighter-rouge&quot;&gt;C-x 2&lt;/code&gt; y
&lt;code class=&quot;highlighter-rouge&quot;&gt;C-x 3&lt;/code&gt;, que la parten horizontal y verticalmente respectivamente. Para volver a
quedarnos sólo con la ventana en la que está el cursor, podemos pulsar &lt;code class=&quot;highlighter-rouge&quot;&gt;C-x 1&lt;/code&gt;;
y para cambiar de ventana sobre la que actúa el cursor podemos usar &lt;code class=&quot;highlighter-rouge&quot;&gt;C-x o&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;modos-de-emacs&quot;&gt;Modos de Emacs&lt;/h3&gt;

&lt;p&gt;El comportamiento de Emacs sobre cada buffer que abra será distinto dependiendo
normalmente de la extensión del archivo. Esto le permite colorear de manera distinta
distintas sintaxis, o tener comportamientos específicos (indentación, atajos de teclado,
formateo) cuando está editando cada lenguaje.&lt;/p&gt;

&lt;p&gt;Cada una de estas formas de edición se llama
&lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Major-Modes.html&quot;&gt;&lt;strong&gt;modo&lt;/strong&gt;&lt;/a&gt;,
y el &lt;strong&gt;modo&lt;/strong&gt; actual aparece
resaltado entre paréntesis en la barra inferior de Emacs. El modo básico es &lt;code class=&quot;highlighter-rouge&quot;&gt;Fundamental&lt;/code&gt;,
pero para cada propósito existen modos específicos. Para casi todos los lenguajes de programación
tendremos un modo. Existen, por ejemplo,
&lt;a href=&quot;https://www.emacswiki.org/emacs/RubyMode&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ruby-mode&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.emacswiki.org/emacs?action=browse;oldid=PythonMode;id=PythonProgrammingInEmacs#toc2&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Python-mode&lt;/code&gt;&lt;/a&gt;
o &lt;a href=&quot;https://www.emacswiki.org/emacs/CcMode&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CC-mode&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Además de los &lt;em&gt;modos mayores&lt;/em&gt;
de los que hemos hablado hasta ahora, existen &lt;em&gt;modos menores&lt;/em&gt; que son opcionales
y complementan a los modos mayores.
Por ejemplo, mientras escribo este artículo estoy usando
&lt;a href=&quot;https://www.emacswiki.org/emacs/MarkdownMode&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt;&lt;/a&gt; como modo mayor
y &lt;code class=&quot;highlighter-rouge&quot;&gt;ARev&lt;/code&gt; (&lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Reverting.html&quot;&gt;Auto-revert mode&lt;/a&gt;)
como modo menor.&lt;/p&gt;

&lt;h2 id=&quot;personalización&quot;&gt;Personalización&lt;/h2&gt;

&lt;p&gt;Prácticamente todos los parámetros que uses en Emacs pueden ser ajustados a tu
necesidad. Desde los atajos de teclado hasta el tema de color y fuentes que usa el editor.&lt;/p&gt;

&lt;p&gt;La forma más básica de editar todas estas configuraciones es &lt;code class=&quot;highlighter-rouge&quot;&gt;M-x customize group&lt;/code&gt;,
que accede a un menú en el que se pueden modificar todas ellas. Todos los cambios
que aquí se hagan se guardarán en un archivo &lt;code class=&quot;highlighter-rouge&quot;&gt;.emacs&lt;/code&gt; (o &lt;code class=&quot;highlighter-rouge&quot;&gt;init.el&lt;/code&gt;, en las versiones
nuevas de Emacs). Este archivo es la otra forma de configurar Emacs; el archivo de inicio
&lt;code class=&quot;highlighter-rouge&quot;&gt;.emacs&lt;/code&gt; contiene código en Elisp que se ejecutará al iniciar el editor y podemos incluir
allí todo lo que queramos configurar. Algunos
paquetes, por ejemplo, necesitarán configuración adicional que habrá que incluir en este archivo.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/mMcc0IF1hV0&quot;&gt;&lt;strong&gt;.Emacs #2 - Customizations and themes&lt;/strong&gt; - &lt;em&gt;jekor&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;sistemas-de-paquetes&quot;&gt;Sistemas de paquetes&lt;/h2&gt;

&lt;h3 id=&quot;melpa&quot;&gt;Melpa&lt;/h3&gt;
&lt;p&gt;Es conveniente añadir un repositorio más grande que el que trae GNU por defecto, y
&lt;a href=&quot;https://melpa.org/#/&quot;&gt;MELPA&lt;/a&gt; es uno de los repositorios de paquetes de Emacs más
grandes y actualizados.
El repositorio de MELPA se añade desde &lt;code class=&quot;highlighter-rouge&quot;&gt;M-x customize-group RET package&lt;/code&gt;. Dentro
de la pestaña de repositorios puede insertarse la dirección de MELPA:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Archive name: melpa-stable
 URL or directory name: https://stable.melpa.org/packages/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Para salir de cualquiera de las pantallas de personalización se usa &lt;code class=&quot;highlighter-rouge&quot;&gt;q&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Otra forma de conseguir este mismo efecto es añadirlo directamente a nuestro
archivo de configuración (&lt;code class=&quot;highlighter-rouge&quot;&gt;.emacs&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;init.el&lt;/code&gt;), como se indica en las &lt;a href=&quot;https://melpa.org/packages/&quot;&gt;instrucciones
de instalación&lt;/a&gt; del repositorio.&lt;/p&gt;

&lt;h3 id=&quot;paquetes&quot;&gt;Paquetes&lt;/h3&gt;

&lt;p&gt;Podemos listar los paquetes que podemos instalar usado &lt;code class=&quot;highlighter-rouge&quot;&gt;M-x list-packages&lt;/code&gt; y podemos
buscar entre los paquetes pulsando varias veces el comando &lt;code class=&quot;highlighter-rouge&quot;&gt;C-s&lt;/code&gt;. Si pulsamos &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; al lado
de uno de ellos se marcará para instalar y al pulsar &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; se ejecutará la instalación de
todos los paquetes marcados.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/Cf6tRBPbWKs&quot;&gt;&lt;strong&gt;.Emacs #3 - Installing packages and extensions&lt;/strong&gt; - &lt;em&gt;jekor&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;paquetes-útiles&quot;&gt;Paquetes útiles&lt;/h2&gt;

&lt;h3 id=&quot;dired&quot;&gt;Dired&lt;/h3&gt;

&lt;p&gt;Dired viene instalado por defecto con Emacs y permite navegar la estructura de
directorios del sistema operativo. Podemos empezar a navegarla usando &lt;code class=&quot;highlighter-rouge&quot;&gt;M-x dired&lt;/code&gt; y
pulsando &lt;code class=&quot;highlighter-rouge&quot;&gt;RET&lt;/code&gt; cada vez que queramos abrir un archivo o una carpeta.&lt;/p&gt;

&lt;p&gt;Podemos además afectar a los archivos. Por ejemplo, si queremos eliminar algunos
archivos, podemos marcarlos con &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt; y eliminarlos definitivamente con &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/7jZdul2fC94&quot;&gt;&lt;strong&gt;.Emacs #4 - Exploring the filesystem&lt;/strong&gt; - &lt;em&gt;jekor&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;org-mode&quot;&gt;org-mode&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;org-mode&lt;/strong&gt; es un modo de Emacs que se creó
originalmente para gestionar listas de tareas, agendas y calendarios; pero además,
contiene en su interior un completo lenguaje de marcado. Permite exportar
documentos a una gran variedad de formatos (pdf, html, latex o markdown) e incluir
internamente trozos de código y ejecutarlos. Además, tiene
un sistema de tablas en texto plano capaz de sustituir la hoja de cálculo para tareas
sencillas. Por todo esto, puede ser usado en tareas como la ciencia reproducible o la
programación literaria cuando Latex es demasiado complejo, ayudando además a manejar
la bibliografía y los enlaces tanto externos como entre archivos.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/SzA2YODtgK4&quot;&gt;&lt;strong&gt;Getting started with org-mode&lt;/strong&gt; - &lt;em&gt;Harry Schwartz&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Especialmente útil para matemáticas es la
&lt;a href=&quot;http://orgmode.org/worg/org-tutorials/org-latex-preview.html&quot;&gt;previsualización de Latex&lt;/a&gt;
y el poder incluir los paquetes de la &lt;a href=&quot;ftp://ftp.ams.org/pub/tex/doc/amsmath/amsldoc.pdf&quot;&gt;AMS&lt;/a&gt;
para marcar teoremas o definiciones.&lt;/p&gt;

&lt;p class=&quot;fig med&quot;&gt;&lt;img src=&quot;https://github.com/libreim/blog/raw/gh-pages/images/org-math.png&quot; alt=&quot;&quot; /&gt;
Apuntes de matemáticas en org-mode&lt;/p&gt;

&lt;h3 id=&quot;magit&quot;&gt;magit&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;magit&lt;/strong&gt; permite integrar Emacs con &lt;strong&gt;git&lt;/strong&gt; fácilmente para incluir los commits desde
dentro del mismo editor. Usando &lt;code class=&quot;highlighter-rouge&quot;&gt;magit-status&lt;/code&gt; llegamos a una pantalla en la que podemos
elegir qué ficheros añadir al commit con &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; &lt;sup id=&quot;fnref:magit-select&quot;&gt;&lt;a href=&quot;#fn:magit-select&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; y visualizar las diferencias con el commit
anterior usando &lt;code class=&quot;highlighter-rouge&quot;&gt;tab&lt;/code&gt;; ejecutar el commit con &lt;code class=&quot;highlighter-rouge&quot;&gt;c c&lt;/code&gt;, que nos mostrará
el buffer con el mensaje de commit y por último usar &lt;code class=&quot;highlighter-rouge&quot;&gt;C-c C-c&lt;/code&gt; para enviarlo. El push y
pull los haremos desde &lt;code class=&quot;highlighter-rouge&quot;&gt;magit-status&lt;/code&gt; con &lt;code class=&quot;highlighter-rouge&quot;&gt;P u&lt;/code&gt; y &lt;code class=&quot;highlighter-rouge&quot;&gt;F u&lt;/code&gt;, respectivamente.&lt;/p&gt;

&lt;p&gt;Es útil asignar un atajo de teclado al comando &lt;code class=&quot;highlighter-rouge&quot;&gt;magit-status&lt;/code&gt;, que es el que muestra la
ventana desde la que controlamos el añadir y hacer commit de ficheros. Por ejemplo, podemos
fijarlo en &lt;code class=&quot;highlighter-rouge&quot;&gt;f5&lt;/code&gt; añadiendo a nuestro archivo de configuración:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(global-set-key (kbd &quot;&amp;lt;f5&amp;gt;&quot;) 'magit-status)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;macros-de-teclado&quot;&gt;Macros de teclado&lt;/h2&gt;

&lt;p&gt;Las macros de teclado nos dejan grabar una secuencia de acciones y volver a repetirla
tantas veces como sea necesaria. Se puede empezar a grabar con &lt;strong&gt;“f3”&lt;/strong&gt; y terminar la
grabación y repetirla tantas veces como sea necesario con &lt;strong&gt;“f4”&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/JfZ9fCHzkJw&quot;&gt;&lt;strong&gt;.Emacs #9 - Keyboard macros&lt;/strong&gt; - &lt;em&gt;jekor&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;elisp&quot;&gt;Elisp&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/&quot;&gt;Emacs Lisp&lt;/a&gt;, o Elisp, es un
lenguaje de programación diseñado específicamente para escribir un editor de texto.
Facilita el tratamiento de texto y el manejo de archivos y buffers.&lt;/p&gt;

&lt;p&gt;Podemos escribir scripts en Elisp que se encarguen de tareas repetitivas en nuestro editor
de texto y asignarlas a atajos de teclado o ampliarlo con más funcionalidad. Un tutorial
básico sobre Elisp es &lt;a href=&quot;http://emacs-doctor.com/learn-emacs-lisp-in-15-minutes.html&quot;&gt;Learn Emacs Lisp in 15 minutes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;notas&quot;&gt;Notas&lt;/h2&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:emacs-productivo&quot;&gt;
      &lt;p&gt;Realmente solo puedo decir que a mí me funciona y que en general los atajos de teclado parecen ser &lt;a href=&quot;http://ux.stackexchange.com/a/30749&quot;&gt;mejores que usar el ratón&lt;/a&gt;.&amp;nbsp;&lt;a href=&quot;#fnref:emacs-productivo&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:emacs-kill-buffer&quot;&gt;
      &lt;p&gt;El &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Killing.html#Killing&quot;&gt;sistema&lt;/a&gt; que Emacs usa para esto es bastante más sofisticado.&amp;nbsp;&lt;a href=&quot;#fnref:emacs-kill-buffer&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:magit-select&quot;&gt;
      &lt;p&gt;De hecho, podemos seleccionar qué párrafos dentro de un fichero queremos añadir al commit.&amp;nbsp;&lt;a href=&quot;#fnref:magit-select&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
            <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
            <link>http://libreim.github.io/blog/2016/09/19/aprendiendo-emacs/</link>
            <guid isPermaLink="true">http://libreim.github.io/blog/2016/09/19/aprendiendo-emacs/</guid>
        </item>
        
        <item>
            <title>Apuntes de introducción al cálculo</title>
            <description>&lt;p&gt;Presentamos el código fuente de un libro completo de Cálculo escrito por D. Francisco Javier Pérez González, profesor
del departamento de Análisis Matemático de la Universidad de Granada, que sirve como una maravillosa
introducción al Análisis y al razonamiento matemático. Los apuntes están escritos en Latex y licenciados en
Creative Commons BY-NC-SA.&lt;/p&gt;

&lt;p&gt;Queremos agradecérselos a D. Javier Pérez,
que nos proporcionó el código de sus apuntes para que pudiésemos publicarlo, y que ha ayudado a hacer del
conocimiento algo libre y accesible a sus alumnos. En su &lt;a href=&quot;http://www.ugr.es/~fjperez/&quot;&gt;página web&lt;/a&gt;
se puede encontrar mucho más material dedicado al análisis matemático, como series de
Fourier, variable compleja o análisis en &lt;script type=&quot;math/tex&quot;&gt;\mathbb{R}^n&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Está disponible &lt;a href=&quot;https://github.com/libreim/calculo/releases/download/apuntes/calculo.pdf&quot;&gt;el libro completo en formato PDF&lt;/a&gt; y el código fuente lo alojamos en &lt;a href=&quot;https://github.com/libreim/calculo&quot;&gt;este repositorio en GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
            <pubDate>Fri, 22 Jul 2016 00:00:00 +0000</pubDate>
            <link>http://libreim.github.io/blog/2016/07/22/apuntes-de-introduccion-al-calculo/</link>
            <guid isPermaLink="true">http://libreim.github.io/blog/2016/07/22/apuntes-de-introduccion-al-calculo/</guid>
        </item>
        
        <item>
            <title>Teoría de tipos</title>
            <description>&lt;p&gt;Los sistemas de tipos tienen su utilidad en las matemáticas. Sirven para modelar
una fundamentación de las matemáticas distinta de la usual fundamentación
conjuntista; y tienen varias aplicaciones interesantes en lenguajes funcionales
y asistentes de demostración. En particular, sobre los tipos se puede definir un
álgebra y se pueden representar sistemas lógicos. Vamos a tratar esas
aplicaciones referenciando en cada caso artículos donde se exponen en profundidad.&lt;/p&gt;

&lt;h2 id=&quot;inducción-estructural&quot;&gt;Inducción estructural&lt;/h2&gt;

&lt;p&gt;La inducción estructural es una generalización de la inducción usual sobre los
naturales que la extiende a otras estructuras representables como tipos de un
lenguaje funcional. Sobre la inducción estructural hemos escrito previamente en el blog una
introducción:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://tux.ugr.es/dgiim/blog/2015/03/14/induccion-estructural/&quot;&gt;Inducción Estructural - Blog LibreIM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En ese post se escriben ejemplos sobre los naturales y los
árboles. El artículo sobre el que se basa es:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://math.blogoverflow.com/2015/03/10/when-can-we-do-induction/&quot;&gt;When can we do induction? - math.blogoverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ejemplos y más detalles sobre inducción estructural y sus usos pueden
encontrarse en:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cs.cmu.edu/~me/212/handouts/structural.pdf&quot;&gt;Some notes on Structural Induction - Michael Erdmann&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://arxiv.org/pdf/1312.2696.pdf&quot;&gt;Structural Induction Principles for Functional Programmers - James Caldwell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y varias demostraciones por inducción estructural implementadas en Coq en este
repositorio sobre &lt;a href=&quot;https://github.com/M42/recorridosArboles&quot;&gt;&lt;strong&gt;recorridos en árboles&lt;/strong&gt;&lt;/a&gt;.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;Álgebra-de-tipos&quot;&gt;Álgebra de tipos&lt;/h2&gt;

&lt;p&gt;En un post anterior de este mismo blog hemos tratado el álgebra de tipos. Ese
post se basó sobre otros tres publicados en el blog de Chris Taylor:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://tux.ugr.es/dgiim/blog/2015/03/24/algebra-tipos/&quot;&gt;Álgebra de tipos - Blog LibreIM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://chris-taylor.github.io/blog/2013/02/10/the-algebra-of-algebraic-data-types/&quot;&gt;The algebra of algebraic data types, Part I - Chris Taylor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://chris-taylor.github.io/blog/2013/02/11/the-algebra-of-algebraic-data-types-part-ii/&quot;&gt;The algebra of algebraic data types, Part II - Chris Taylor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://chris-taylor.github.io/blog/2013/02/13/the-algebra-of-algebraic-data-types-part-iii/&quot;&gt;The algebra of algebraic data types, Part III - Chris Taylor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En el segundo de los artículos se usan funciones generadoras para probar
resultados sobre los números de Catalan y los árboles binarios. La teoría de
funciones generadoras necesaria para entender el tratamiento de los árboles
binarios la explica Mike Spivey en
&lt;em&gt;&lt;a href=&quot;https://mikespivey.wordpress.com/2013/03/19/the-catalan-numbers-from-their-generating-function/&quot;&gt;The catalan numbers from their generating function&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Además, existe un resultado de &lt;strong&gt;Fiore y Leinster&lt;/strong&gt; que afirma que si demostramos
una relacion polinómica para números complejos, también será válida para
cualquier &lt;a href=&quot;https://en.wikipedia.org/wiki/Semiring&quot;&gt;semianillo&lt;/a&gt;. Y por tanto, para los tipos.
Esto quiere decir que, en la mayoría de las ocasiones, podemos usar
la resta o la división de tipos como si existieran. La demostración excluye
algunos casos particulares y se expone aquí:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://arxiv.org/pdf/math/0212377v1.pdf&quot;&gt;Objects of categories as complex numbers - Marcelo Fiore y Tom Leinster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sobre el uso de las derivadas en el álgebra de tipos existe un resultado de
&lt;strong&gt;Conor McBride&lt;/strong&gt; que relaciona las derivadas parciales con los &lt;a href=&quot;http://learnyouahaskell.com/zippers&quot;&gt;&lt;em&gt;zippers&lt;/em&gt;&lt;/a&gt; de Haskell
usados para representar contextos. Puede leerse aquí:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://strictlypositive.org/diff.pdf&quot;&gt;The derivative of a regular type is its type of one-hole contexts - Conor McBride&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lógica-con-tipos&quot;&gt;Lógica con tipos&lt;/h2&gt;

&lt;p&gt;La aplicación de los tipos a la lógica y las demostraciones parte del
isomorfismo de Curry-Howard, que relaciona los sistemas de tipos con sistemas
lógicos. El sistema más simple donde puede apreciarse el isomorfismo es el
&lt;a href=&quot;https://en.wikipedia.org/wiki/Typed_lambda_calculus&quot;&gt;&lt;strong&gt;cálculo lambda tipado&lt;/strong&gt;&lt;/a&gt;,
que es isomorfo a la
&lt;a href=&quot;https://en.wikipedia.org/wiki/Natural_deduction&quot;&gt;&lt;strong&gt;deducción natural&lt;/strong&gt;&lt;/a&gt;. La
deducción natural es un ejemplo de lógica intuicionista, lo que en la práctica
quiere decir que &lt;em&gt;no&lt;/em&gt; (!) se tienen el &lt;em&gt;tercio excluso&lt;/em&gt; y la &lt;em&gt;doble negación&lt;/em&gt; como
axiomas:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A \wedge \neg A&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\neg \neg A \implies A&lt;/script&gt;

&lt;p&gt;Los apuntes sobre
&lt;a href=&quot;https://github.com/libreim/curryHoward/blob/master/CurryHoward.pdf&quot;&gt;&lt;strong&gt;Curry-Howard&lt;/strong&gt;&lt;/a&gt;
de los repositorios del doble grado explican el isomorfismo sobre la deducción
natural y el cálculo lambda tipado. El
&lt;a href=&quot;https://github.com/libreim/curryHoward/tree/master/src&quot;&gt;código fuente&lt;/a&gt;
acompañando los apuntes está escrito en Coq y Haskell.&lt;/p&gt;

&lt;p&gt;La idea de tratar las proposiciones como tipos la expone &lt;strong&gt;Philip Wadler&lt;/strong&gt; en los
dos siguientes artículos: primero de manera didáctica, con una introducción
histórica y sobre el sistema de la deducción natural, y luego de forma más
compleja, exponiendo el isomorfismo sobre el sistema de tipos de Haskell.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://homepages.inf.ed.ac.uk/wadler/papers/propositions-as-types/propositions-as-types.pdf&quot;&gt;Propositions as Types - Philip Wadler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://homepages.inf.ed.ac.uk/wadler/papers/gr2/gr2.pdf&quot;&gt;The Girard-Reynolds Isomorphism - Philip Wadler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;parametricidad&quot;&gt;Parametricidad&lt;/h2&gt;

&lt;p&gt;La parametricidad limita las instancias posibles de los tipos de la forma
&lt;code class=&quot;highlighter-rouge&quot;&gt;forall a. p(a)&lt;/code&gt;, y nos permite obtener teoremas sobre todas las instancias de
esos tipos. Se explica a nivel intuitivo en el siguiente post de Bartosz
Milewski y más formalmente en este paper de Philip Wadler:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://bartoszmilewski.com/2014/09/22/parametricity-money-for-nothing-and-theorems-for-free/&quot;&gt;Parametricity: Money for Nothing and Theorems for Free - Bartosz Milewski&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ttic.uchicago.edu/~dreyer/course/papers/wadler.pdf&quot;&gt;Theorems for free! - Philip Wadler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;teoría-de-tipos&quot;&gt;Teoría de tipos&lt;/h2&gt;

&lt;p&gt;Los tipos pueden usarse para fundamentar las matemáticas, del mismo modo que lo
hacen los conjuntos (en sistemas axiomáticos como
&lt;a href=&quot;https://en.wikipedia.org/wiki/Zermelo%E2%80%93Fraenkel_set_theory&quot;&gt;ZFC&lt;/a&gt;) o las
categorías (en sistemas como &lt;a href=&quot;https://ncatlab.org/nlab/show/ETCS&quot;&gt;ETCS&lt;/a&gt;). En el
siguiente artículo se discuten las diferencias de ambos con la &lt;strong&gt;teoría de tipos
dependientes de Martin-Löf&lt;/strong&gt;, que se expone por completo en las notas de
Nordström, Petersson y Smith:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://golem.ph.utexas.edu/category/2013/01/from_set_theory_to_type_theory.html&quot;&gt;From Set Theory to Type Theory - The n-Category Café&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cse.chalmers.se/~bengt/papers/hlcs.pdf&quot;&gt;Martin-Löf Type Theory - B. Nordström, K. Petersson, J.M. Smith&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Esto nos da una fundamentación de las matemáticas con una interpretación
computacional clara.&lt;/p&gt;

&lt;p&gt;Una refinación de esas teorías para producir una fundamentación también
constructivista de las matemáticas es el Cálculo de Construcciones (Calculus of
constructions, COC) desarrollado por &lt;strong&gt;Thierry Coquand&lt;/strong&gt; y &lt;strong&gt;Gérard Huet&lt;/strong&gt;,
que finalmente dará lugar al asistente de demostraciones &lt;strong&gt;COQ&lt;/strong&gt;, desarrollado por
el INRIA. El &lt;a href=&quot;https://en.wikipedia.org/wiki/Lambda_cube&quot;&gt;&lt;strong&gt;&lt;script type=&quot;math/tex&quot;&gt;\lambda&lt;/script&gt;-cubo&lt;/strong&gt;&lt;/a&gt; es un diagrama para exponer cómo este sistema amplía
al &lt;em&gt;cálculo lambda tipado&lt;/em&gt; y al &lt;em&gt;Sistema &lt;script type=&quot;math/tex&quot;&gt;F_\omega&lt;/script&gt;&lt;/em&gt; que usa Haskell.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://ac.els-cdn.com/0890540188900053/1-s2.0-0890540188900053-main.pdf?_tid=3846e956-b301-11e5-8e78-00000aab0f02&amp;amp;acdnat=1451925532_87ac5a8e6a7bd6477746a55c17130f43&quot;&gt;Calculus of Constructions - T. Coquand, G. Huet&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coq.inria.fr/&quot;&gt;The Coq proof assistant - INRIA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
            <pubDate>Fri, 08 Jan 2016 00:00:00 +0000</pubDate>
            <link>http://libreim.github.io/blog/2016/01/08/teoria-de-tipos/</link>
            <guid isPermaLink="true">http://libreim.github.io/blog/2016/01/08/teoria-de-tipos/</guid>
        </item>
        
        <item>
            <title>Guía para primero</title>
            <description>&lt;p&gt;&lt;em&gt;Actualizada a 30 de julio de 2016.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Esta es una guía orientada al nuevo estudiante del doble grado, escrita con la intención
de ahorrarle el largo camino que el resto de alumnos hemos seguido hasta asentar
una manera de trabajar y estudiar eficiente. La escribimos pensando en el
artículo que nos hubiera gustado leer al empezar la carrera y la publicamos a
principios de septiembre, justo con ese propósito en mente.&lt;/p&gt;

&lt;h2 id=&quot;pero-no-me-basta-con-lo-que-me-enseñen-en-la-universidad&quot;&gt;Pero, ¿no me basta con lo que me enseñen en la universidad?&lt;/h2&gt;

&lt;p&gt;Sí, el temario de las asignaturas que vas a cursar es el necesario para
aprobarlas. Puedes pasar todo este texto por alto y seguir sacando buena nota.
Todo lo que te vamos a contar a continuación va dirigido a que
puedas organizar mejor tu trabajo, ahorrar mucho tiempo y evitarte pequeños
desastres. Probablemente, llegarías tú mismo a estas conclusiones después de un tiempo
en la carrera; sólo vamos a acelerar ese proceso. Además, la mayoría de las
herramientas que destacamos seguro que acabarás teniendo que usarlas en algún
momento, como estudiante o en tu carrera
profesional, así que mejor que cojas algo de práctica antes.&lt;/p&gt;

&lt;p&gt;Esto probablemente no sea suficiente. Durante la carrera habrá
momentos en los que tendrás que buscarte la vida y encontrar más formas de
conseguir información, realizar alguna tarea, etc. Tendrás también que aprender a buscar
bibliografía y otras herramientas por tu propia cuenta.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;cómo-controlo-mis-proyectos-de-código&quot;&gt;¿Cómo controlo mis proyectos de código?&lt;/h2&gt;

&lt;p&gt;Lo que queremos evitar es que las carpetas de tu proyecto acaben pareciéndose a
esto:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./proyecto.zip
./proyecto2.zip
./proyecto3.zip
./proyecto&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;nofunciona&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.zip
./asdfasdf.zip
./proyectofinal.zip
./proyectofinal2.zip
./proyectofinal&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;entregar&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.zip
./proyectofinal&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;entregar&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;FINAL&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;de verdad&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Esto tiene puntos extra si además debes trabajar con otro compañero y comunicarle
cada cambio que hayáis escrito en un &lt;code class=&quot;highlighter-rouge&quot;&gt;.zip&lt;/code&gt;. Ambos vais a estar trabajando
sobre el mismo código y vuestros cambios pueden solaparse o contradecirse.
Mantener únicamente Dropbox o soluciones similares tiende a la larga a hacerse
complejo y poco práctico.&lt;/p&gt;

&lt;p&gt;Y para evitar eso, necesitas alguna herramienta que te permita manejar el proyecto,
unir los cambios de varias personas y volver atrás, al tiempo en el que el
código funcionaba. Esta herramienta es un sistema de &lt;strong&gt;control de versiones&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;&lt;strong&gt;Git&lt;/strong&gt;&lt;/a&gt; es un sistema de control de versiones escrito por
&lt;a href=&quot;https://es.wikipedia.org/wiki/Linus_Torvalds&quot;&gt;Linus Torvalds&lt;/a&gt;.
Permite ramificar el desarrollo de un proyecto en ramas y distribuirlo entre
varios desarrolladores, facilitando luego mezclar todos los cambios en una única
rama. Y &lt;a href=&quot;https://github.com/&quot;&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt; es un servicio de almacenamiento de código que usa el control de
versiones Git. Te servirá en los trabajos en grupo para tener un servidor central
con el que varias personas puedan trabajar directamente y para publicar el código.&lt;/p&gt;

&lt;p&gt;Para empezar tienes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Un &lt;a href=&quot;http://tux.ugr.es/dgiim/blog/2014/02/23/manualgit/&quot;&gt;manual rápido de Git/GitHub&lt;/a&gt;, escrito por David Charte en este mismo blog.&lt;/li&gt;
  &lt;li&gt;Un &lt;a href=&quot;https://github.com/oslugr/curso-git&quot;&gt;curso completo de Git&lt;/a&gt;, con &lt;a href=&quot;https://github.com/oslugr/curso-git&quot;&gt;eBook descargable&lt;/a&gt; que también puedes adquirir en Amazon.&lt;/li&gt;
  &lt;li&gt;La propia &lt;a href=&quot;https://git-scm.com/documentation&quot;&gt;documentación de Git&lt;/a&gt;, desde su página oficial.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cuando tengas un perfil en GitHub, recuerda indicar en tu perfil que estás en Granada para
aparecer en los &lt;a href=&quot;https://github.com/JJ/top-github-users-data/blob/master/formatted/top-Granada.md&quot;&gt;ránkings locales&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;cómo-escribo-los-trabajos-de-matemáticas&quot;&gt;¿Cómo escribo los trabajos de matemáticas?&lt;/h2&gt;

&lt;p&gt;Las matemáticas tienen el problema de que necesitan de más símbolos de los que
provee cualquier editor de textos normal. Hay formas de editar ecuaciones con
&lt;em&gt;LibreOffice&lt;/em&gt; o &lt;em&gt;MSOffice&lt;/em&gt;, pero es más práctico utilizar un sistema diseñado al
efecto. Tienes que afrontar además que tu &lt;em&gt;versión 6.2.8 de Word 2013&lt;/em&gt; no es
un estándar en ningún sitio. Probablemente sólo siga funcionando en dos años,
con la &lt;em&gt;versión 7.4.2 de Word 2015&lt;/em&gt; si sacrificas los saltos de línea, la mitad de las
ecuaciones y un gatito. Seguramente deje de funcionar en 6 años.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LaTeX&lt;/strong&gt; es un lenguaje de marcado, como HTML, con el que están escritos la
mayoría de documentos matemáticos. Es un estándar de facto para publicaciones
científicas: vuestro trabajo final de carrera deberá usarlo y si alguna vez
quieres publicar en una revista, te enviarán una plantilla de LaTeX.&lt;/p&gt;

&lt;p&gt;Por otro lado, también vas a
necesitar escribir diapositivas para presentar trabajos de
matemáticas. PowerPoint &lt;strong&gt;no&lt;/strong&gt; es una opción.
&lt;strong&gt;Beamer&lt;/strong&gt; es una clase específica de LaTeX para escribir
presentaciones, pero también se usa con asiduidad
&lt;a href=&quot;http://lab.hakim.se/reveal-js/#/&quot;&gt;reveal.js&lt;/a&gt; con el que puedes crear
presentaciones desde la web en &lt;a href=&quot;http://slides.com&quot;&gt;slides.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para empezar a aprender tienes dos artículos en este blog, escritos por
Pablo Baeyens:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://tux.ugr.es/dgiim/blog/2015/03/14/latex/&quot;&gt;¿Cómo aprender LaTeX?&lt;/a&gt;, un compendio de recursos.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://tux.ugr.es/dgiim/blog/2015/03/14/intro-beamer/&quot;&gt;Introducción a Beamer&lt;/a&gt;, una guía de beamer escrita en beamer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Aprender LaTeX no es un proceso fácil, pero te acabará siendo rentable. Si
quieres escribir ciencia, los procesadores usuales de texto no son lo más útil.
Hay artículos del 1999 explicando por qué:
&lt;a href=&quot;http://ricardo.ecn.wfu.edu/~cottrell/wp.html&quot;&gt;Word Processors: Stupid and Inefficient&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;puffff-latex-es-complicadísimo&quot;&gt;Puffff, LaTeX es complicadísimo.&lt;/h2&gt;

&lt;p&gt;Tenemos una alternativa. &lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/a&gt; es otro lenguaje de marcado, diseñado por
&lt;em&gt;John Gruber&lt;/em&gt; y &lt;em&gt;Aaron Swartz&lt;/em&gt;, mucho más sencillo. Con &lt;a href=&quot;http://pandoc.org/&quot;&gt;&lt;strong&gt;pandoc&lt;/strong&gt;&lt;/a&gt; podrás
transformar a PDF documentos escritos en Markdown con fórmulas de LaTeX en su
interior.&lt;/p&gt;

&lt;p&gt;De hecho, este mismo post que estás leyendo está escrito en Markdown. Puedes
verlo &lt;a href=&quot;https://raw.githubusercontent.com/libreim/blog/gh-pages/_posts/2015-09-10-primero.md&quot;&gt;aquí&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sin embargo, aun existiendo Markdown, las publicaciones grandes requerirán de un
poder expresivo que Markdown no tiene. Aprende LaTeX siendo consciente de que
para pequeños trabajos tienes esta alternativa. Precisamente, cuanto más difícil
te parezca, más valor tiene que lo aprendas.&lt;/p&gt;

&lt;h2 id=&quot;está-todo-en-inglés&quot;&gt;¿Está todo en inglés?&lt;/h2&gt;

&lt;p&gt;Prácticamente, sí. Es un esfuerzo enorme reescribir cada pieza de documentación
de software o cada artículo científico en varios idiomas. El estándar de facto
en la ciencia y la programación es el inglés. Seguramente no te descubrimos nada
nuevo.&lt;/p&gt;

&lt;p&gt;Para obtener el título necesitarás acreditar un nivel mínimo B1 (CEFR) o equivalente en alguna lengua
extranjera. Tienes a tu favor (o en tu contra) que todos los días trabajarás con
artículos, programas y documentación en inglés; así que tendrás tiempo
suficiente para estudiarlo a bastante más nivel del que te exigen.&lt;/p&gt;

&lt;h2 id=&quot;si-tengo-una-duda-cómo-la-resuelvo&quot;&gt;Si tengo una duda, ¿cómo la resuelvo?&lt;/h2&gt;

&lt;p&gt;A lo largo de la carrera vas a tener miles de pequeñas dudas, destinadas
principalmente a quitarte el tiempo que dedicarás a intentar solucionarlas.
Formará parte del aprendizaje lidiar con ellas y saber buscarles solución.&lt;/p&gt;

&lt;p&gt;No subestimes los buscadores de internet, como &lt;strong&gt;Google&lt;/strong&gt; o &lt;strong&gt;DuckDuckGo&lt;/strong&gt;. La mayoría
de problemas de quien no estudia informática se resuelven con una búsqueda en internet. Si no
deben ser un problema para nosotros es simplemente porque buscamos antes de
considerarlos siquiera un problema. Además de los tradicionales, existe
&lt;a href=&quot;http://www.wolframalpha.com/&quot;&gt;&lt;strong&gt;Wolfram Alpha&lt;/strong&gt;&lt;/a&gt;, motor de respuestas
centrado en matemáticas y sitio al que acudir cuando no sale una integral.&lt;/p&gt;

&lt;p&gt;Si tu duda es sobre programación, probablemente haya surgido antes y tenga respuesta en
&lt;a href=&quot;http://stackoverflow.com/&quot;&gt;&lt;strong&gt;StackOverflow&lt;/strong&gt;&lt;/a&gt;. Para un programador, StackOverflow cumple el papel de
oráculo al que consultarle todas las preguntas que surjan.
Busca previamente si tu duda ha sido ya formulada y resuelta, y si no, ¡pregunta!
Para ello aprovecha sus consejos sobre &lt;a href=&quot;https://meta.stackexchange.com/questions/10811/how-do-i-ask-and-answer-homework-questions&quot;&gt;cómo preguntar sobre trabajos&lt;/a&gt;
y otras &lt;a href=&quot;https://meta.stackexchange.com/questions/7931/faq-for-stack-exchange-sites&quot;&gt;preguntas frecuentes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;StackOverflow forma parte de &lt;a href=&quot;http://stackexchange.com/&quot;&gt;&lt;strong&gt;StackExchange&lt;/strong&gt;&lt;/a&gt;, una red proporcionando otros
foros similares. Entre los útiles para nosotros están:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://math.stackexchange.com/&quot;&gt;&lt;strong&gt;MathStackExchange&lt;/strong&gt;&lt;/a&gt;, para preguntas de cualquier nivel sobre matemáticas.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mathoverflow.net/&quot;&gt;&lt;strong&gt;MathOverflow&lt;/strong&gt;&lt;/a&gt;, para preguntas sobre investigación en matemáticas.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://tex.stackexchange.com/&quot;&gt;&lt;strong&gt;TexStackExchange&lt;/strong&gt;&lt;/a&gt;, sobre LaTeX.&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;fig&quot;&gt;&lt;img src=&quot;http://imgs.xkcd.com/comics/wisdom_of_the_ancients.png&quot; alt=&quot;&quot; longdesc=&quot;/blog/images/guia-primero/wisdom_of_the_ancients.html&quot; /&gt;
Imagen de &lt;a href=&quot;https://xkcd.com/979/&quot;&gt;xkcd: Wisdom of the Ancients&lt;/a&gt; (&lt;abbr title=&quot;Creative Commons&quot;&gt;CC&lt;/abbr&gt; BY-NC)&lt;/p&gt;

&lt;p&gt;Si la duda es más específica a nuestra carrera, prueba en nuestro
&lt;a href=&quot;http://tux.ugr.es/dgiim/overflow/&quot;&gt;&lt;strong&gt;foro&lt;/strong&gt; de matemáticas e informática&lt;/a&gt;.
Hemos pasado por el mismo camino que tú y probablemente nos hayamos
encontrado con los mismos problemas.&lt;/p&gt;

&lt;p&gt;Además, cada pieza de software suele llevar una &lt;strong&gt;documentación&lt;/strong&gt; asociada, que detalla
cómo funciona, bajo qué comandos y cómo debe usarse. Búscala
cuando te encuentres con algún problema o no sepas cómo usar una herramienta.&lt;/p&gt;

&lt;h2 id=&quot;qué-es-el-software-libre-y-por-qué-me-importa&quot;&gt;¿Qué es el software libre? ¿y por qué me importa?&lt;/h2&gt;

&lt;p&gt;En el ámbito académico tendrás que utilizar distintos programas de todo tipo
para aprender, componer trabajos y realizar prácticas. Lo habitual será que
uses aplicaciones gratuitas, y en algún caso raro puede que se aproveche algún
programa de pago para el que la universidad tenga licencia.&lt;/p&gt;

&lt;p&gt;Sin embargo, para tu estudio propio será muy conveniente utilizar aplicaciones
de &lt;strong&gt;código abierto&lt;/strong&gt;, que permiten que explores sus archivos de código y así, si
te hace falta podrás entender su funcionamiento. Además, algunas de estas
vendrán bajo una licencia que te otorgará libertades de distribución y
modificación, entre otras. Es decir, serán aplicaciones libres.&lt;/p&gt;

&lt;p&gt;El &lt;strong&gt;software libre&lt;/strong&gt; se define como aquel que permite las siguientes libertades
que definió la &lt;a href=&quot;http://www.fsf.org/&quot;&gt;&lt;strong&gt;Free Software Foundation&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Usar el programa.&lt;/li&gt;
  &lt;li&gt;Estudiar cómo funciona un programa y adaptarlo.&lt;/li&gt;
  &lt;li&gt;Distribuir copias del programa.&lt;/li&gt;
  &lt;li&gt;Mejorar el programa, modificarlo y publicar esas modificaciones.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El movimiento del software libre surgió como alternativa a las restricciones
impuestas por empresas de software en los años ochenta, y para tratar de
recuperar el lado más instructivo y colaborativo del desarrollo de software.
Para asegurar que se protegieran las libertades de los usuarios se crearon
licencias libres. Te vendrá bien conocer las más importantes, para reconocerlas
en el software que utilices y para escogerlas para tus propios proyectos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.gnu.org/licenses/gpl-3.0.en.html&quot;&gt;&lt;strong&gt;&lt;abbr title=&quot;General Public License&quot;&gt;GPL&lt;/abbr&gt;&lt;/strong&gt;&lt;/a&gt;. Asegura las libertades
de la FSF. Además, si otro programa usa fragmentos de código en &lt;abbr title=&quot;General Public License&quot;&gt;GPL&lt;/abbr&gt;, debe
licenciarse completamente en &lt;abbr title=&quot;General Public License&quot;&gt;GPL&lt;/abbr&gt; (esta condición se llama &lt;em&gt;copyleft&lt;/em&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Permisivas&lt;/strong&gt; (&lt;a href=&quot;http://mit-license.org/&quot;&gt;MIT&lt;/a&gt;,
&lt;a href=&quot;https://www.apache.org/licenses/&quot;&gt;Apache&lt;/a&gt;…). Ofrecen las libertades básicas
pero no tienen &lt;em&gt;copyleft&lt;/em&gt;, lo que permite que un proyecto derivado tenga una
licencia distinta (incluso privativa).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://es.creativecommons.org/blog/licencias/&quot;&gt;&lt;strong&gt;Creative Commons&lt;/strong&gt;&lt;/a&gt;. No
son específicas para el código. Los posts de este blog están por lo general
licenciados en Creative Commons 4.0 BY-SA. Lo que quiere decir que puedes
reusarlos para obras derivadas si acreditas autoría y mantienes la misma
licencia.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La Universidad de Granada cuenta con una &lt;a href=&quot;http://osl.ugr.es&quot;&gt;&lt;strong&gt;Oficina de Software Libre&lt;/strong&gt;&lt;/a&gt;
situada en el número 36-38 de la C/ Real de Cartuja, compartiendo edificio con
el &lt;abbr title=&quot;Centro de Enseñanzas Virtuales de la Universidad de Granada&quot;&gt;CEVUG&lt;/abbr&gt;. Se encarga de difundir el uso, desarrollo y docencia del
software libre. Si necesitas ayuda con la instalación de Linux en tu
portátil, dirígete allí para que te echen una mano. Puedes también
seguirlos en &lt;a href=&quot;http://twitter.com/oslugr&quot;&gt;@oslugr&lt;/a&gt; y
&lt;a href=&quot;https://www.facebook.com/SoftwareLibreUGR&quot;&gt;Facebook&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Si necesitas más razones para evitar el software privativo en tu aprendizaje,
mejor que nosotros lo explica JJ Merelo en su artículo
&lt;a href=&quot;https://medium.com/espanol/7-razones-para-que-no-obligues-a-tus-alumnos-a-usar-una-aplicacion-determinada-en-tus-asignaturas-a845545295e&quot;&gt;7 razones para que no obligues a tus alumnos a usar una aplicación determinada&lt;/a&gt;.
En general, nadie os obligará a usar una aplicación privativa determinada. Nadie
debería hacerlo. Pero en el caso de que ocurriera, podéis dirigiros a
la OSL usando alguno de los canales anteriores.&lt;/p&gt;

&lt;h2 id=&quot;tengo-que-instalar-linux&quot;&gt;¿Tengo que instalar Linux?&lt;/h2&gt;

&lt;p&gt;La respuesta rápida es que sí. Es seguro que antes o después deberás usar un
sistema operativo libre para aprender, y GNU/Linux es el más común. Una opción
es usar una máquina virtual para instalarlo sobre tu sistema operativo actual
pero, a la larga, va a volverse incómodo, y el hecho de que no utilices GNU/Linux
para el día a día retrasará mucho el aprendizaje. Como primer paso, es buena idea
hacer otra partición en tu disco duro e instalarlo junto al sistema operativo que ahora uses;
el paso opcional, es prescindir de cualquier otro sistema operativo e instalar
directamente GNU/Linux. Durante la carrera no necesitarás ningún sistema operativo
privativo.&lt;/p&gt;

&lt;p&gt;GNU/Linux viene en muchas formas, llamadas distribuciones. Puedes consultarlas
y elegir la que más te guste. Algunas de las más comunes son
&lt;a href=&quot;http://www.ubuntu.com/desktop&quot;&gt;Ubuntu&lt;/a&gt; (y sus derivadas Mint, Elementary…) y
&lt;a href=&quot;http://archlinux.org/&quot;&gt;Arch Linux&lt;/a&gt; (con variantes como Antergos o Manjaro).
Vienen bien equipadas, y casi cualquier otro programa que necesites estará al
alcance de un comando de terminal, gracias a los &lt;strong&gt;gestores de paquetes&lt;/strong&gt;, como
APT (Ubuntu) y Pacman (Arch). Además, puedes personalizar la interfaz gráfica;
un ejemplo es la &lt;a href=&quot;http://blog.fdavidcl.me/post/105862529162/mi-escritorio-minimalista&quot;&gt;configuración de David
Charte&lt;/a&gt; para Ubuntu GNOME.&lt;/p&gt;

&lt;h2 id=&quot;la-terminal-sirve-más-allá-de-para-presumir&quot;&gt;La terminal ¿sirve (más allá de para presumir)?&lt;/h2&gt;

&lt;p&gt;El aprendizaje de la línea de comandos es esencial para esta
carrera. Descárgate e imprime
&lt;a href=&quot;http://www.disi.unige.it/person/MoggiE/PG1-13/bash.quickref.pdf&quot;&gt;esta guía rápida&lt;/a&gt;, ponla en tu mochila e intenta
usarla siempre que puedas, incluso si no es el camino más fácil ni más agradable.
La mayoría de las veces, existirá una interfaz gráfica que simplificará y
facilitará cualquier trabajo que queráis hacer, pero esto te limitará a
usar la interfaz gráfica, a usar un programa como alguien ya pensó que debía ser
usado. Aprender a usarla requiere mucho tiempo, pero te liberará para escribir más allá
de lo que otros han hecho.&lt;/p&gt;

&lt;h2 id=&quot;hay-trillocientos-lenguajes-de-programación-cuántos-me-tengo-que-aprender&quot;&gt;Hay trillocientos lenguajes de programación. ¿Cuántos me tengo que aprender?&lt;/h2&gt;

&lt;p&gt;La respuesta de cuántos es bastante debatible, y tampoco es que &lt;em&gt;aprender un
lenguaje&lt;/em&gt; sea un concepto bien definido. ¿Cuándo has aprendido C++?
¿cuando escribes un proyecto grande? ¿cuando te aprendes la documentación entera?
Además, aprender varios lenguajes que sólo se diferencian en detalles sintácticos
no suele proporcionar mucho valor. Dos lenguajes se diferencian realmente, y aportan
formas distintas de pensar acerca de la programación, si implementan
distintos &lt;strong&gt;paradigmas de programación&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Lo que sí podemos es listarte los varios lenguajes que, salvo cambios en los planes de
estudio, son los que verás en la carrera:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cplusplus.com/doc/tutorial/&quot;&gt;&lt;strong&gt;C++&lt;/strong&gt;&lt;/a&gt;. Los algoritmos y las estructuras de datos suelen explicarse a los
alumnos que se inician en programación en C++. Similares a C++ son &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/&quot;&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/a&gt; y &lt;a href=&quot;http://www.gnu.org/software/gnu-c-manual/gnu-c-manual.html&quot;&gt;&lt;strong&gt;C&lt;/strong&gt;&lt;/a&gt;.
Si aprendes cualquiera de ellos, te será
fácil estudiar los otros. Justo
estos tres lenguajes son los más usados.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;&lt;strong&gt;Ruby&lt;/strong&gt;&lt;/a&gt;. Necesitarás un lenguaje de scripting. Aunque Ruby es el que se suele
enseñar en Programación Orientada a Objetos, existen &lt;a href=&quot;https://www.python.org/&quot;&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.perl.org/&quot;&gt;&lt;strong&gt;Perl&lt;/strong&gt;&lt;/a&gt; y muchos más.
Aquí tienes un
&lt;a href=&quot;http://ruby-doc.com/docs/ProgrammingRuby/&quot;&gt;tutorial y referencia del lenguaje&lt;/a&gt;
y una &lt;a href=&quot;http://jj.github.io/ruby-para-impacientes/&quot;&gt;guía rápida para impacientes&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.r-project.org/&quot;&gt;&lt;strong&gt;R&lt;/strong&gt;&lt;/a&gt;. Para el tratamiento de datos y la estadística. &lt;a href=&quot;https://github.com/fcharte/CursoUNIA14/blob/master/ExploraVisualizaConR-FCharte.pdf?raw=true&quot;&gt;Explora y visualiza con R&lt;/a&gt;
es una introducción escrita por Francisco Charte.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.gnu.org/software/bash/manual/bash.html&quot;&gt;&lt;strong&gt;Bash&lt;/strong&gt;&lt;/a&gt;. Que será probablemente el intérprete de terminal que acabes usando.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Aparte de los lenguajes que aprendas en la carrera, te será muy útil explorar
otros lenguajes, ver para qué sirven y a qué paradigmas responden. Además, eso te
ayudará a saber elegir el lenguaje correcto cuando se te presente un problema a
resolver. Lo que al final será recomendable es que dominéis al menos tres lenguajes, uno
de bajo nivel, uno de scripting y uno raro, como aconseja Víctor Terrón en su
charla &lt;a href=&quot;http://www.iaa.es/~vterron/sed-hackers.pdf&quot;&gt;Sed Hackers&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;genial-pero-cómo-escribo-los-programas&quot;&gt;Genial, pero ¿cómo escribo los programas?&lt;/h2&gt;

&lt;p&gt;Lo que necesitas para escribir un programa es redactar su código fuente.
Generalmente compilarás este código fuente para generar un ejecutable o usarás
un intérprete para ejecutarlo. Así que la pregunta aquí es ¿cómo escribo código?&lt;/p&gt;

&lt;p&gt;Realmente no necesitas gran cosa. Cualquier &lt;strong&gt;editor de texto&lt;/strong&gt; sirve justo
para eso, para editar texto, y el código no es ningún tipo especial de texto.
Aunque existen &lt;strong&gt;entornos integrados de desarrollo&lt;/strong&gt; (IDEs), que incorporan
multitud de herramientas para programar, pueden ser lentas y engorrosas a la
hora de trabajar. Por simplicidad y versatilidad, nos parece preferible un
editor. Si aprendes a programar con él podrás programar después donde haga falta.&lt;/p&gt;

&lt;p&gt;Tienes muchos para elegir, por ejemplo en las distribuciones Linux encontrarás
incluidos algunos bastante sencillos, como &lt;a href=&quot;https://help.ubuntu.com/community/gedit&quot;&gt;&lt;strong&gt;GEdit&lt;/strong&gt;&lt;/a&gt;
o &lt;a href=&quot;http://kate-editor.org/&quot;&gt;&lt;strong&gt;Kate&lt;/strong&gt;&lt;/a&gt;, similares a &lt;a href=&quot;https://notepad-plus-plus.org/&quot;&gt;&lt;strong&gt;Notepad++&lt;/strong&gt;&lt;/a&gt;
para Windows. Los editores más clásicos, potentes y extensibles son
&lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;&lt;strong&gt;Emacs&lt;/strong&gt;&lt;/a&gt; y &lt;a href=&quot;http://www.vim.org/&quot;&gt;&lt;strong&gt;Vim&lt;/strong&gt;&lt;/a&gt;.
Si prefieres editores más modernos con mucha funcionalidad te podemos sugerir
&lt;a href=&quot;https://atom.io/&quot;&gt;&lt;strong&gt;Atom&lt;/strong&gt;&lt;/a&gt; y &lt;a href=&quot;http://brackets.io/&quot;&gt;&lt;strong&gt;Brackets&lt;/strong&gt;&lt;/a&gt; (¿estabas
pensando en Sublime Text? Estos últimos son alternativas libres, pruébalos).
Algunos editores se pueden utilizar desde la propia terminal, uno de los más
sencillos en este ámbito es Nano.&lt;/p&gt;

&lt;p class=&quot;fig&quot;&gt;&lt;img src=&quot;http://imgs.xkcd.com/comics/real_programmers.png&quot; alt=&quot;&quot; longdesc=&quot;/blog/images/guia-primero/real_programmers.html&quot; /&gt;
Imagen de &lt;a href=&quot;https://xkcd.com/378/&quot;&gt;xkcd: Real Programmers&lt;/a&gt; (&lt;abbr title=&quot;Creative Commons&quot;&gt;CC&lt;/abbr&gt; BY-NC)&lt;/p&gt;

&lt;h2 id=&quot;estas-matemáticas-no-se-parecen-a-las-del-instituto-cómo-demuestro-las-cosas&quot;&gt;Estas matemáticas no se parecen a las del instituto, ¿cómo demuestro las cosas?&lt;/h2&gt;

&lt;p&gt;Esta pregunta la responde por nosotros el &lt;a href=&quot;http://www.ugr.es/~fjperez/textos/calculo_diferencial_integral_func_una_var.pdf&quot;&gt;&lt;strong&gt;Cálculo diferencial e integral
de funciones de una variable&lt;/strong&gt;&lt;/a&gt;,
de Francisco Javier Pérez, profesor del departamento de Análisis.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Supongo que hace ya tanto tiempo que conoces estas propiedades de
 los números que has olvidado cuándo las aprendiste. ¡Y ahora te
 pido que las &lt;em&gt;demuestres&lt;/em&gt;! Puedo imaginar tu reacción
 &lt;em&gt;¿que demuestre que &lt;script type=&quot;math/tex&quot;&gt;0x=0&lt;/script&gt;?, ¡pero si eso es evidente!
 ¡siempre me han dicho que es así! ¿cómo se puede demostrar tal
 cosa?&lt;/em&gt;.&lt;/p&gt;

  &lt;p&gt;Pienso que muchas veces la dificultad de un ejercicio está en
 que no sabes qué es exactamente lo que se te pide que hagas;
 no te dan un marco claro de referencia. En estas situaciones lo
 más frecuente es &lt;em&gt;quedarse colgado&lt;/em&gt; con la
 &lt;em&gt;mente en blanco&lt;/em&gt; sin saber qué hacer.&lt;/p&gt;

  &lt;p&gt;Para evitar ese peligro,
 en este curso vamos a dar un marco de referencia muy claro que va
 a consistir en unas propiedades de los números – &lt;em&gt;axiomas&lt;/em&gt;, si
 quieres llamarlas así – que vamos a aceptar como punto de
 partida para nuestro estudio. Esas propiedades, junto con las
 &lt;em&gt;reglas de inferencia lógica&lt;/em&gt; usuales y con &lt;em&gt;definiciones&lt;/em&gt;
 apropiadas nos permitirán &lt;em&gt;demostrar&lt;/em&gt; resultados (&lt;em&gt;teoremas&lt;/em&gt;) que
 podremos usar para seguir avanzando.&lt;/p&gt;

  &lt;p&gt;[…]&lt;/p&gt;

  &lt;p&gt;Los &lt;strong&gt;axiomas&lt;/strong&gt; de una teoría matemática proporcionan el marco de referencia más general de dicha teoría.
 Son, por tanto, muy importantes. Al principio, cuando la teoría empieza a caminar y se demuestran los
 primeros resultados más básicos, es frecuente recurrir de forma explícita a los axiomas. Más adelante,
 cuando la teoría va avanzando, los axiomas no suelen citarse con tanta frecuencia porque nos apoyamos
 en resultados más elaborados previamente demostrados.  Pero los axiomas siempre están presentes aunque
 sea de forma discreta y no ostensible.&lt;/p&gt;

  &lt;p&gt;Entre las particularidades que distinguen a las Matemáticas de las demás ciencias hay una muy especial:
 las Matemáticas avanzan dando &lt;strong&gt;definiciones&lt;/strong&gt;. Las definiciones no son nuevos axiomas. Una definición lo
 que hace es introducir un término nuevo y establece cómo dicho término se expresa en función de los
 axiomas de la teoría. Por ejemplo, la definición de continuidad se expresa mediante desigualdades y
 las desigualdades se reducen a los axiomas de orden de &lt;script type=&quot;math/tex&quot;&gt;\mathbb{R}&lt;/script&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;El texto completo puede encontrarse en el primer capítulo del libro, que se publicó
con una licencia Creative Commons (BY-NC-SA). Gracias a eso, podemos enlazarlo y puedes
leerlo, copiarlo y distribuirlo libremente, siempre respetando la autoría y la licencia.
El texto completo te será muy útil para la asignatura de &lt;strong&gt;Cálculo I&lt;/strong&gt;. Como bonus,
el libro en sí se escribió completamente &lt;a href=&quot;https://github.com/libreim/calculo&quot;&gt;en LaTeX&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Acostúmbrate a pensar como un matemático. Es una de las habilidades más
importantes que aprenderás en la carrera. El blog Gaussianos reseña en este
artículo &lt;a href=&quot;http://gaussianos.com/diez-formas-de-pensar-como-un-matematico/&quot;&gt;&lt;strong&gt;10 formas de pensar como un matemático&lt;/strong&gt;&lt;/a&gt;,
consejos de un manual de &lt;strong&gt;Kevin Houston&lt;/strong&gt;, profesor de la Universidad
de Leeds. En un plano más práctico, &lt;strong&gt;Jeremy Kun&lt;/strong&gt;, doctorando en la Universidad de Illinois,
escribe sobre cómo afrontar un examen de cálculo (y por extensión, un examen de
matemáticas puras) en este artículo: &lt;a href=&quot;http://jeremykun.com/2011/10/20/how-to-take-a-calculus-test/&quot;&gt;&lt;strong&gt;How to take a calculus test&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;cómo-puedo-empezar-a-estudiar-análisisálgebraprobabilidadgeometría&quot;&gt;¿Cómo puedo empezar a estudiar análisis/álgebra/probabilidad/geometría?&lt;/h2&gt;

&lt;p&gt;Escribe y entiende los axiomas y definiciones básicos de la teoría y, sólo después,
lee detenidamente cómo se demuestra cada teorema a partir de ellos. Busca ejemplos
y contraejemplos de cada teorema y al final, resuelve los ejercicios usando las
definiciones y teoremas que has estudiado previamente.&lt;/p&gt;

&lt;p&gt;Sólo en algunas asignaturas la teoría aparece como tal en el examen.
Pero te recomendamos de todas formas seguir el proceso anterior;
no tiene mucho sentido hacer ejercicios sin saber en qué se fundamentan. Además,
muchos problemas son una mera consecuencia de las demostraciones vistas en
la teoría y otros son sólo una aplicación práctica de los resultados teóricos. En cualquier
caso, los ejercicios te servirán en muchos casos para motivar la teoría y comprobar
si la has entendido, mantener un ojo en ellos siempre será muy útil.&lt;/p&gt;

&lt;h2 id=&quot;qué-libros-me-compro-para-la-carrera&quot;&gt;¿Qué libros me compro para la carrera?&lt;/h2&gt;

&lt;p&gt;Generalmente, no es imprescindible tener ningún libro en casa para aprobar una
asignatura. Y ten en cuenta que la biblioteca te los puede proporcionar cuando
sean necesarios.&lt;/p&gt;

&lt;p&gt;Por otro lado, es posible que tengas una beca de libros o te guste tener un
libro de cada área para consultar dudas y ejercicios. En tal caso lo recomendable
es que busques libros generales que cubran materias
enteras de las matemáticas o la informática. En nuestra &lt;a href=&quot;/dgiim/awesome/&quot;&gt;página de recursos&lt;/a&gt; hay varias
recomendaciones. Si quieres algo general, como ya te advertimos, la respuesta está
siempre en StackExchange:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://mathoverflow.net/questions/761/undergraduate-level-math-books&quot;&gt;MathOverflow. Undergraduate level math books.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/143760/what-books-should-i-read-to-have-an-undergraduate-education-in-computer-science&quot;&gt;StackOverflow. What books should I read to have an undergraduate education in computer science?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y si quieres algo más concreto, pregunta en el &lt;a href=&quot;/dgiim/overflow/&quot;&gt;foro&lt;/a&gt;. Entre todos llevamos la cuenta
de qué libros son útiles para cada asignatura.&lt;/p&gt;

&lt;p&gt;Otra opción para obtener bibliografía son los cursos online que ofrecen plataformas como
&lt;a href=&quot;https://www.coursera.org/&quot;&gt;Coursera&lt;/a&gt;, &lt;a href=&quot;https://www.udacity.com/&quot;&gt;Udacity&lt;/a&gt; y
&lt;a href=&quot;https://www.edx.org/&quot;&gt;edX&lt;/a&gt;. En ellas encontrarás cursos gratuitos sobre algoritmos,
estructuras de datos, lenguajes de programación, ánalisis de datos, criptografía u otras áreas.&lt;/p&gt;

&lt;h2 id=&quot;quiero-problemas&quot;&gt;Quiero problemas.&lt;/h2&gt;

&lt;p&gt;Por suerte, hay miles de sitios donde practicar tus habilidades programando y
resolviendo problemas de matemáticas. Tu habilidad para resolver problemas va a
ser crucial para que el resto sea fácil, pero no te agobies, no es necesario
dominar ninguno de los recursos que te planteamos aquí.&lt;/p&gt;

&lt;p&gt;Antes que empezar con
ninguno de ellos, es más importante que domines los ejercicios de las asignaturas.
Especialmente en
matemáticas, los libros suelen traer consigo una lista de ejercicios.
Intenta resolverlos por ti mismo, escribiendo una demostración formal y con
palabras en papel; incluso si no sale ninguno, servirán para comprender el tema.
Entre los &lt;a href=&quot;/dgiim/awesome/&quot;&gt;recursos&lt;/a&gt; de esta página tienes libros y apuntes con sus correspondientes
ejercicios.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackerrank.com/&quot;&gt;&lt;strong&gt;Hackerrank&lt;/strong&gt;&lt;/a&gt; ofrece problemas de programación y un juez online para evaluar
que el código que has escrito sea correcto y eficiente. Puedes practicar el uso
de los algoritmos y estructuras de datos más comunes y enfrentarte a problemas
realmente difíciles con los que aprender a pensar algorítmicamente y
matemáticamente.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.kaggle.com/&quot;&gt;&lt;strong&gt;Kaggle&lt;/strong&gt;&lt;/a&gt; se orienta a problemas de &lt;em&gt;Data Science&lt;/em&gt;, la
extracción de conocimiento desde grandes conjuntos de datos.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.artofproblemsolving.com/community&quot;&gt;&lt;strong&gt;Art of Problem Solving&lt;/strong&gt;&lt;/a&gt; contiene
problemas de matemáticas de varios niveles.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;puedo-colaborar&quot;&gt;¿Puedo colaborar?&lt;/h2&gt;

&lt;p&gt;La colaboración es parte fundamental del desarrollo científico e informático.
Ser capaz de trabajar en equipo y gestionar el trabajo y la comunicación entre
varios es una de las habilidades con las que deberías salir de la carrera.&lt;/p&gt;

&lt;p&gt;Tendrás muchas oportunidades para trabajar en proyectos conjuntos con tus
compañeros. En cualquier caso, en un intento por construir comunidad en torno
a la carrera y ampliarla a todos los que quieran aprender sobre matemáticas e
informática, empezamos este mismo &lt;a href=&quot;http://tux.ugr.es/dgiim/blog/&quot;&gt;blog&lt;/a&gt; que estás leyendo, un &lt;a href=&quot;http://tux.ugr.es/dgiim/overflow/&quot;&gt;foro&lt;/a&gt; donde
compartir dudas y una &lt;a href=&quot;https://github.com/libreim&quot;&gt;organización de GitHub&lt;/a&gt; con repositorios para proyectos
comunes. El funcionamiento de todo esto depende de la colaboración.&lt;/p&gt;

&lt;p&gt;Para participar en todo esto sólo necesitas la cuenta en GitHub y que te
incluyamos en &lt;a href=&quot;https://github.com/libreim&quot;&gt;LibreIM&lt;/a&gt;. Para eso, puedes escribirnos
a &lt;a href=&quot;libreim.blog@gmail.com&quot;&gt;libreim.blog@gmail.com&lt;/a&gt;, o simplemente rellenar este &lt;a href=&quot;http://goo.gl/forms/k4Yl1TK5XT2ZaDro1&quot;&gt;formulario&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;qué-hago-hasta-que-empecemos&quot;&gt;¿Qué hago hasta que empecemos?&lt;/h2&gt;

&lt;p&gt;Repasando el artículo completo, vamos a darle un orden. Aunque quizá ya hayas cumplido
algunos puntos, suponemos que vienes sin formación previa:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Instala Linux.&lt;/strong&gt; Elige una distribución y prepárate para el proceso completo.
Ten especial cuidado si quieres crear particiones en el disco. Si necesitas
ayuda, puedes pedírnosla a nosotros o a la OSL.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Prueba la terminal.&lt;/strong&gt; Y el gestor de paquetes. En Ubuntu, por ejemplo, puedes
instalar usando &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Léete los apuntes de matemáticas.&lt;/strong&gt; Échale un vistazo a los primeros apuntes de
cálculo, por ejemplo, e intenta resolver los primeros ejercicios demostrando formalmente desde los axiomas.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Instala TexLive&lt;/strong&gt;. Y empieza a probar LaTeX con los tutoriales que hemos enlazado antes.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Prueba algún lenguaje&lt;/strong&gt;. Compila un “hola mundo” en C++, o escríbelo en Python.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Instala Git&lt;/strong&gt;. Y abre una cuenta en GitHub. Puedes solicitar repositorios
privados gratuitos en &lt;a href=&quot;https://education.github.com/&quot;&gt;GitHub Education&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pero-esto-es-vuestra-opinión-sesgada-seguramente&quot;&gt;Pero esto es vuestra opinión, sesgada seguramente.&lt;/h2&gt;

&lt;p&gt;Sí. Respondemos aquí a preguntas sobre las que entendemos que hay suficiente
consenso, pero eso tampoco es una definición concreta. Hay mil maneras de
resolver cada uno de los problemas que hemos
planteado, y es buena idea que consideres las alternativas. Lo que te ofrecemos
es lo que ha sido más útil para nosotros en los primeros años de carrera. Además,
las herramientas más útiles cambian con el tiempo. Quizá en un futuro tengamos que
reescribir por completo este artículo.&lt;/p&gt;

&lt;h2 id=&quot;referencias-y-otras-opiniones&quot;&gt;Referencias y otras opiniones&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;J.J. Merelo&lt;/strong&gt;, profesor de la UGR y director de la OSL, escribe sobre las
&lt;a href=&quot;https://medium.com/espanol/7-habilidades-que-deberian-estar-en-un-curriculum-informatico-pero-no-estan-40bd0d7da879&quot;&gt;10 habilidades que deberían estar en un currículum informático&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Víctor Terrón&lt;/strong&gt;, del Instituto de Astrofísica de Andalucía, escribió esta charla
para los alumnos de primer año de ingeniería informática: &lt;a href=&quot;http://www.iaa.es/~vterron/sed-hackers.pdf&quot;&gt;Sed Hackers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Francisco Charte&lt;/strong&gt;, investigador en la Universidad de Jaén, escribió una
introducción a la investigación para el doble grado: &lt;a href=&quot;https://github.com/libreim/quiero-investigar/raw/master/QuieroInvestigar-FCharte.pdf&quot;&gt;Quiero investigar, ¿por dónde empiezo?&lt;/a&gt;&lt;/p&gt;

</description>
            <pubDate>Thu, 10 Sep 2015 00:00:00 +0000</pubDate>
            <link>http://libreim.github.io/blog/2015/09/10/primero/</link>
            <guid isPermaLink="true">http://libreim.github.io/blog/2015/09/10/primero/</guid>
        </item>
        
        <item>
            <title>Iterating in Ruby: Enumerable and Enumerators</title>
            <description>&lt;p&gt;The syntax of a programming language is one of the key points when it comes to
the difficulty in its learning process. Here we examine the traditional syntaxes
for iterating through a collection of any type, and place them face to face with a
newer, more semantic one based on objects called Enumerators.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Let’s imagine we’ve got a collection of items, such as an array, a hash or a
set. We may want to be able to iterate through all its elements, either with
a determinate order or without it. To achieve this task in most programming
languages we usually resort to loop structures, for example a &lt;em&gt;for&lt;/em&gt; loop.
In this case, we will need to use a special syntax in order to
describe the conditions in which the iterations will be made. For example, in
a C-like language:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Code goes here
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!--more--&gt;

&lt;p&gt;Likewise, in a Pascal-style language we could write something like the
following:&lt;/p&gt;

&lt;div class=&quot;language-pascal highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr_size&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Code goes here
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Since loops of this kind have a very generic syntax, and they’re frequently
used for these tasks, some languages provide a &lt;em&gt;for..in&lt;/em&gt; loop able to iterate
through the items of a collection:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// C++11
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-pascal highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Pascal
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;These syntaxes can sometimes become cumbersome, for example, when using the
&lt;code class=&quot;highlighter-rouge&quot;&gt;::iterator&lt;/code&gt; class of STL containers in C++:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This makes the code more difficult to read and makes it less semantic, since
a programmer who isn’t aware of the use of iterators in C++ wouldn’t find it
easy to understand.&lt;/p&gt;

&lt;p&gt;Let’s fix this.&lt;/p&gt;

&lt;h2 id=&quot;the-enumerable-mixin&quot;&gt;The Enumerable mixin&lt;/h2&gt;

&lt;h3 id=&quot;each&quot;&gt;each&lt;/h3&gt;
&lt;p&gt;Let me introduce you to our first Ruby enumerator, given by the &lt;code class=&quot;highlighter-rouge&quot;&gt;each&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Do things with 'item'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Well that was easy. But still, a couple of things are happening here. First, we
are calling the &lt;code class=&quot;highlighter-rouge&quot;&gt;each&lt;/code&gt; method for &lt;code class=&quot;highlighter-rouge&quot;&gt;collection&lt;/code&gt; (suppose this is an array, for example)
which accepts no parameters (so we could have written &lt;code class=&quot;highlighter-rouge&quot;&gt;.each() do...&lt;/code&gt;).
Then, we are specifying a &lt;em&gt;block&lt;/em&gt; between &lt;code class=&quot;highlighter-rouge&quot;&gt;do&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;end&lt;/code&gt;; this is a piece of
code received by the method, who can call it on demand (more on that later).
The block does however receive one parameter, indicated between vertical bars
&lt;code class=&quot;highlighter-rouge&quot;&gt;|item|&lt;/code&gt;. Each time the block is run, &lt;code class=&quot;highlighter-rouge&quot;&gt;item&lt;/code&gt; will contain a different element
of the collection.&lt;/p&gt;

&lt;p&gt;This method is nonetheless a very special one, since a whole module of code
can be incorporated to any class that implements it. This new module is the
Enumerable mixin&lt;sup id=&quot;fnref:ruby-enumerable&quot;&gt;&lt;a href=&quot;#fn:ruby-enumerable&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. A mixin is a piece of code that adds
functionality but isn't autonomous on its own. Enumerable incorporates several
methods that take advantage of the &lt;code class=&quot;highlighter-rouge&quot;&gt;each&lt;/code&gt; method to be able to retrieve elements
and look for items with certain properties, map functions to all of them,
accumulate elements using an operator, etc.&lt;/p&gt;

&lt;p&gt;In the following subsections we will take a look at the main purposes these
methods can fulfill. Not all the methods available will be covered, but an
exhaustive reference can be found in the &lt;a href=&quot;http://ruby-doc.org/core-2.2.2/Enumerable.html&quot;&gt;Ruby documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;taking-elements&quot;&gt;Taking elements&lt;/h3&gt;

&lt;p&gt;Extracting elements from a collection is usually a functionality implemented
directly into the class, but despite that, Enumerable includes some basic
methods which may come in handy.&lt;/p&gt;

&lt;p&gt;Firstly, the &lt;code class=&quot;highlighter-rouge&quot;&gt;take&lt;/code&gt; method is pretty straightforward: it returns as many
elements from the collection as specified. Likewise, the &lt;code class=&quot;highlighter-rouge&quot;&gt;first&lt;/code&gt; method is as simple as
it sounds: if no parameters are passed, it returns the first item. Otherwise,
it can achieve the same task as &lt;code class=&quot;highlighter-rouge&quot;&gt;take&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Other interesting methods that return elements of a collection are &lt;code class=&quot;highlighter-rouge&quot;&gt;cycle&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;drop&lt;/code&gt;. The first one is able to indefinitely provide with items by cycling
through the collection, whereas the latter returns the elements left after
dropping as many as the parameter indicates.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;detecting-items-with-certain-properties&quot;&gt;Detecting items with certain properties&lt;/h3&gt;

&lt;p&gt;The Enumerable mixin incorporates a lot of methods for detecting and finding
elements by user criteria. The simplest and less informative ones just return
a boolean value; for instance &lt;code class=&quot;highlighter-rouge&quot;&gt;any?&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;all?&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;one?&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;none?&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;any?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:even?&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:even?&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;one?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:even?&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;none?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:even?&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The syntax used in this example is a shortcut for passing a block, that is, the
call to &lt;code class=&quot;highlighter-rouge&quot;&gt;any?&lt;/code&gt; above is equivalent to the following:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;any?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;even?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Other methods that return specific elements are &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;find_index&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;max&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;min&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; method takes a block, calls it for each element of the
collection, and returns the first element that makes the block evaluate
as true. &lt;code class=&quot;highlighter-rouge&quot;&gt;find_index&lt;/code&gt; behaves similarly but returns the index of the matching
element, instead of the element itself. Lastly, the &lt;code class=&quot;highlighter-rouge&quot;&gt;min&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;max&lt;/code&gt; methods
return the minimum and maximum values respectively, accepting a block that
can serve as a comparison operator.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;min&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;

&lt;span class=&quot;sx&quot;&gt;%w(hola hi hei)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hi&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;dl&gt;
  &lt;dt&gt;Note&lt;/dt&gt;
  &lt;dd&gt;Comparison operators in Ruby work as a three-way comparison&lt;sup id=&quot;fnref:wiki-3comp&quot;&gt;&lt;a href=&quot;#fn:wiki-3comp&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, that is,
they return 1, 0 or -1 according to whether &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
a &lt; b %]]&gt;&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;a = b&lt;/script&gt; or &lt;script type=&quot;math/tex&quot;&gt;a &gt; b&lt;/script&gt;.
The &lt;em&gt;spaceship&lt;/em&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;=&amp;gt;&lt;/code&gt;) operator implements this kind of behavior.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&quot;filtering-elements&quot;&gt;Filtering elements&lt;/h3&gt;

&lt;p&gt;An useful application of the iteration through a collection is to filter its
elements and obtain a new collection, either by retaining or dropping the ones
which match a certain criterion. This can be achieved with two methods called
&lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;reject&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:zero?&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:zero?&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;dl&gt;
  &lt;dt&gt;Note&lt;/dt&gt;
  &lt;dd&gt;As seen in the example, these methods don’t actually modify the object
identified by &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;, but instead they return a new array as a result.
Their “exclaimed” counterparts, &lt;code class=&quot;highlighter-rouge&quot;&gt;select!&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;reject!&lt;/code&gt;, on the contrary, do
alter the object with the result of the filter.

    &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select!&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:zero?&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;The exclamation notation for methods that alter the object
they’re called on, or have side effects in general,
is pretty common in Ruby, and the manipulation methods
listed on the following subsection also have an “exclaimed” duplicate.&lt;/p&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&quot;manipulating-collections&quot;&gt;Manipulating collections&lt;/h3&gt;

&lt;p&gt;Enumerable provides several methods that allow reordering and applying
different processes to items. The &lt;code class=&quot;highlighter-rouge&quot;&gt;sort&lt;/code&gt; method is simple and works as
expected, using Quicksort as the underlying algorithm&lt;sup id=&quot;fnref:ruby-quicksort&quot;&gt;&lt;a href=&quot;#fn:ruby-quicksort&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.
A block can be passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;sort&lt;/code&gt; to be relied on as comparison operator.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;l18n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hola mundo!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Salut le monde!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;l18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Lexicographic order&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hola mundo!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Salut le monde!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;l18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Inverse length order&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Salut le monde!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hola mundo!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt; method allows to create tuples of elements by passing one or
several collections:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;langs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:es&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:en&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:es&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:en&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;langs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l18n&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:es&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hola mundo!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:en&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Salut le monde!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;group_by&lt;/code&gt; method classifies the items of the collection
according to the different values the block returns and composes a Hash:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;group_by&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:even?&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Finally, a more generic methods that enables the programmer to apply a function
to every element and put together an array with the results is &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;, also
known as &lt;code class=&quot;highlighter-rouge&quot;&gt;collect&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;other-methods&quot;&gt;Other methods&lt;/h3&gt;

&lt;p&gt;There are two more methods worthy of mention: &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;, which is able to
aggregate values into an accumulator, and &lt;code class=&quot;highlighter-rouge&quot;&gt;lazy&lt;/code&gt;, which creates a lazy
enumerator out of the collection (an object that can serve as a wrapper
for manipulation of infinite elements).&lt;/p&gt;

&lt;p&gt;Firstly, &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt; generalizes the task of iteratively merging elements
into any kind of result such as a sum or a mean. It can be used jointly with
the &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; method to gather information about the collection:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Sum the length of all the words in a string&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;%w(I can has cheezburger)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For its part, &lt;code class=&quot;highlighter-rouge&quot;&gt;lazy&lt;/code&gt; can take any collection and create a lazy enumerator out
of it, but it’s most useful when used with infinite sequences:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;nonnegative&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;INFINITY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lazy&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonnegative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Sum the two previous elements&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;force&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note that in this last example the &lt;code class=&quot;highlighter-rouge&quot;&gt;force&lt;/code&gt; method is used to make the interpreter
calculate the results. Otherwise, it would just return another lazy enumerator
to allow chaining methods. This particular version of the fibonacci sequence is very slow, because it
will recursively calculate every number in the sequence out of the previous
ones. A memoized version can be written with a lambda function&lt;sup id=&quot;fnref:lazy-ruby&quot;&gt;&lt;a href=&quot;#fn:lazy-ruby&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;. Later
on, another faster way to enumerate the Fibonacci sequence will be shown.&lt;/p&gt;

&lt;h3 id=&quot;using-enumerable-in-your-class&quot;&gt;Using Enumerable in your class&lt;/h3&gt;

&lt;p&gt;Adding all this functionality to a class in Ruby is as easy as implementing an
&lt;code class=&quot;highlighter-rouge&quot;&gt;each&lt;/code&gt; method and including the Enumerable mixin, like in the following example:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Blog&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enumerable&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# The class uses any kind of internal collection&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;Mean inequalities&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;Introduction to JavaScript&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;Introduction to Category Theory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;Genetic algorithms&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# The each method should invoke 'yield' for every element&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dgiim&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dgiim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Mean inequalities&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;using-blocks&quot;&gt;Using blocks&lt;/h2&gt;

&lt;p&gt;Being able to receive and call blocks of code within methods is the key point for
Enumerable methods to work. The &lt;code class=&quot;highlighter-rouge&quot;&gt;each&lt;/code&gt; method provides the ability to iterate
through all elements, which allows the rest of the methods to act on each element
according to the returned value of a block.&lt;/p&gt;

&lt;p&gt;As we’ve seen before, a block in Ruby is just a piece of code wrapped between
&lt;code class=&quot;highlighter-rouge&quot;&gt;do&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;end&lt;/code&gt;. Method symbols can be used together with an ampersand (&amp;amp;) as
a short-hand for blocks. This means that if we have a collection of objects
of class &lt;code class=&quot;highlighter-rouge&quot;&gt;MyClass&lt;/code&gt;, and they implement method &lt;code class=&quot;highlighter-rouge&quot;&gt;my_method&lt;/code&gt;, then its symbol is
&lt;code class=&quot;highlighter-rouge&quot;&gt;:my_method&lt;/code&gt;, and one could use the syntax &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;:my_method&lt;/code&gt; to compact the following
block:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;my_method&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Any method defined by the programmer can receive and call a block, either via the
&lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; statement or the &lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt; method. In this first example, we use &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; to
execute a block without parameters:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call_block&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Before calling block&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;After calling block&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;call_block&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This is block&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Before calling block
This is block
After calling block
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The second example shows how to receive a block as a parameter with the ampersand
syntax, execute it with &lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt; and pass parameters to it:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Before calling block&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;After calling block&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;call_block&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I was passed argument &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Before calling block
I was passed argument 4
After calling block
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Lastly, blocks can be stored as objects of class Proc in variables&lt;sup id=&quot;fnref:ruby-blocks&quot;&gt;&lt;a href=&quot;#fn:ruby-blocks&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;.
In order to do this, we can just pass the block to the constructor:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Procs can be passed as blocks by using the same ampersand syntax. Notice that in
this case the variable itself is used instead of a symbol (&lt;code class=&quot;highlighter-rouge&quot;&gt;:square&lt;/code&gt;), because we
want to pass the whole object instead of its name.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply_proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;apply_proc&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-enumerator-class&quot;&gt;The Enumerator class&lt;/h2&gt;

&lt;p&gt;Most of the methods seen above return processed results when they receive a block,
but when they don’t, they can return an object of class Enumerator&lt;sup id=&quot;fnref:ruby-enumerator&quot;&gt;&lt;a href=&quot;#fn:ruby-enumerator&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;. This object
is a wrapper that contains the information necessary to iterate through the
collection.&lt;/p&gt;

&lt;p&gt;Additionally, Enumerators implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;each&lt;/code&gt; method as well, so
Enumerable methods can also be called on them. This means Enumerators can be
chained, which is useful to modify the way we act on collections without implementing
new methods. For example, if we wanted to enumerate an array of items starting from
the back and grouping them according to their index modulo 3, we would write something
like the following:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w(a b c d e)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reverse_each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;group_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_with_index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;e&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice how the chaining order changes how elements are returned. Indexes are not
returned in the example above, but they can be obtained by just swapping &lt;code class=&quot;highlighter-rouge&quot;&gt;group_by&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;each_with_index&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reverse_each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_with_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;group_by&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;e&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Enumerators need not be created out of existing collections, method &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; of the
class can be used as well. This method accepts a block with a parameter that will
act as “yielder object”. The block is expected to iteratively push each element to
the yielder, which will in turn retrieve only the elements needed, pausing the
generation of elements otherwise. A simple Enumerator can be just a countdown from
10 to 1:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;countdown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yielder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;yielder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;countdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Since the yielder will only use the necessary elements, Enumerators can generate
infinite sequences. For example, the following Enumerator generates
prime numbers, and the next one is a fast Fibonacci generator.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Primes Enumerator&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yielder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;yielder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Find next prime&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prime&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;prime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Fibonacci Enumerator&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yielder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;yielder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Calculate 500 elements, retrieve last&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;499&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;86168291600238450732788312165664788095941068326060883324529903470149056115823592713458328176574447204501&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Have you noticed the &lt;code class=&quot;highlighter-rouge&quot;&gt;loop&lt;/code&gt; word used above to create an infinite loop? It’s actually
just a function using an Enumerator which generates infinitely many &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; values. It can be seen
as well how the typical &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt; accesor can’t be used on an Enumerator, simply because
it’s not implemented; but we can do that for ourselves:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Enumerator&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;218922995834555169026&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;In this article we’ve studied how different syntaxes work for the same purposes of iteration. Classic
&lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loops are generic and not very semantic. This means that, in addition to being a
special structure, they commonly force the programmer to expose the logic used to
iterate through a collection. This is something that generally should be avoided, and
the class of the collection should be the one providing the functionality.&lt;/p&gt;

&lt;p&gt;Furthermore, different tasks can be achieved with generic loops, that then need an
explanation of some comments. To solve this, the Enumerable mixin incorporates very
specific iteration methods that are mostly self-explanatory, and ease programming as
well as later readings of the code. Finally, in addition to iterating through existing collections, items can be generated
on demand with Enumerator objects. Enumerators and lazy Enumerators are powerful
tools to calculate elements of finite and infinite sequences. I’d encourage you to
give them a try, be creative and find new ways to use them.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:ruby-enumerable&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://ruby-doc.org/core-2.2.2/Enumerable.html&quot;&gt;Enumerable - Ruby Docs&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:ruby-enumerable&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:wiki-3comp&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Three-way_comparison&quot;&gt;Three-way comparison - Wikipedia&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:wiki-3comp&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:ruby-quicksort&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.igvita.com/2009/03/26/ruby-algorithms-sorting-trie-heaps/&quot;&gt;Ruby Algorithms: Sorting, Trie and Heaps - Ilya Grigorik&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:ruby-quicksort&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:lazy-ruby&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://sonnym.github.io/2014/04/05/lazy-ruby/&quot;&gt;Lazy Ruby - Effluence&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:lazy-ruby&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:ruby-blocks&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.reactive.io/tips/2008/12/21/understanding-ruby-blocks-procs-and-lambdas/&quot;&gt;Understanding Ruby Blocks, Procs and Lambdas - Reactive.IO&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:ruby-blocks&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:ruby-enumerator&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://ruby-doc.org/core-2.2.2/Enumerator.html&quot;&gt;Enumerator - Ruby Docs&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:ruby-enumerator&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
            <pubDate>Mon, 24 Aug 2015 00:00:00 +0000</pubDate>
            <link>http://libreim.github.io/blog/2015/08/24/ruby-enumerators/</link>
            <guid isPermaLink="true">http://libreim.github.io/blog/2015/08/24/ruby-enumerators/</guid>
        </item>
        
        <item>
            <title>Segment trees y Range minimum query</title>
            <description>&lt;p&gt;En los cursos de estructuras de datos y algoritmos el número de estructuras de datos que se suelen estudiar es bastante reducido. Generalmente se introducen heaps, árboles binarios de búsqueda balanceados (AVL), tablas Hash y algunos algoritmos sobre grafos. Sin embargo, el mundo de las estructuras de datos es mucho más amplio  &lt;sup id=&quot;fnref:list&quot;&gt;&lt;a href=&quot;#fn:list&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; y probablemente requeriría una asignatura de estructuras de datos avanzadas como sucede en algunas universidades. El MIT, por ejemplo, proporciona &lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-851-advanced-data-structures-spring-2012/lecture-videos/&quot;&gt;vídeos&lt;/a&gt; con el contenido de esta asignatura. Por ello, intentaré escribir entradas en el blog que profundicen en esta temática.&lt;/p&gt;

&lt;p&gt;En este caso trataremos los &lt;strong&gt;segment trees&lt;/strong&gt; o árboles de segmentos. Introduciremos en primer lugar un problema importante de la teoría de algoritmos, &lt;strong&gt;range minimum query problem&lt;/strong&gt;, que servirá como motivación para los segment trees. Posteriormente se explicará el funcionamiento de estos, proporcionando para cada operación su correspondiente código en Python. Por último, se proponen como ejercicio algunos problemas resolubles mediante segment trees.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;range-minimum-query-problem&quot;&gt;Range Minimum Query Problem&lt;/h2&gt;

&lt;p&gt;Consideremos un vector con objetos de un tipo &lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt; sobre el que se ha definido una relación de orden total. Por claridad, ejemplificaremos el problema sobre números enteros. Sea &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; la longitud del vector, se define &lt;script type=&quot;math/tex&quot;&gt;RMQ(i,j)&lt;/script&gt; como el mínimo del subvector formado por las componentes entre &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; y &lt;script type=&quot;math/tex&quot;&gt;j&lt;/script&gt; (inclusive) para &lt;script type=&quot;math/tex&quot;&gt;i, j&lt;/script&gt; en &lt;script type=&quot;math/tex&quot;&gt;\{0,\ldots,n-1\}&lt;/script&gt; con &lt;script type=&quot;math/tex&quot;&gt;i \le j&lt;/script&gt;.  El problema consiste en proporcionar el valor de &lt;script type=&quot;math/tex&quot;&gt;RMQ(i,j)&lt;/script&gt; para cualquier número posible de consultas.&lt;/p&gt;

&lt;p&gt;Normalmente se denomina &lt;em&gt;subintervalo del vector&lt;/em&gt; a un subvector formado por componentes consecutivas, como los que se estudian en este caso. Una posible traducción al castellano de &lt;em&gt;range minimum query problem&lt;/em&gt; sería &lt;em&gt;problema de las consultas del mínimo de cualquier subintervalo&lt;/em&gt; (pero mantendremos el nombre en inglés por ser el estándar).&lt;/p&gt;

&lt;p&gt;La solución trivial para el problema consiste en calcular para cada consulta el mínimo del subintervalo correspondiente de forma lineal. Esto proporciona una eficiencia media de &lt;script type=&quot;math/tex&quot;&gt;\theta(n)&lt;/script&gt; para las consultas. Se pretende reducir esta eficiencia significativamente para poder atender el mayor número de consultas posible.&lt;/p&gt;

&lt;p&gt;La forma habitual de abordar el problema consiste en preprocesar los datos. Un primer preprocesamiento puede ser calcular directamente el mínimo para cada subintervalo del vector, lo que puede conseguirse sin mucha dificultad en &lt;script type=&quot;math/tex&quot;&gt;\theta(n^2)&lt;/script&gt;. Posteriormente, las consultas pueden ser realizadas en tiempo constante. Esta solución tiene dos grandes problemas:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Un preprocesamiento de eficiencia &lt;script type=&quot;math/tex&quot;&gt;\theta(n^2)&lt;/script&gt; es excesivo cuando se trate con vectores de tamaño mayor o igual que &lt;script type=&quot;math/tex&quot;&gt;10^4&lt;/script&gt;. Esto nos hace distinguir dos eficiencias a la hora de resolver el problema, la eficiencia del preprocesamiento y la eficiencia de la consulta. La solución trivial minimizaba el preprocesamiento mientras que la nueva solución minimiza el tiempo de consulta, no siendo ninguna de las dos óptimas.&lt;/li&gt;
  &lt;li&gt;El problema suele complicarse permitiendo actualizar el valor de una componente del vector entre consultas, lo que no consigue de forma eficiente el segundo algoritmo, que requiere un tiempo &lt;script type=&quot;math/tex&quot;&gt;\theta(n)&lt;/script&gt; para actualizar también la matriz &lt;script type=&quot;math/tex&quot;&gt;RMQ&lt;/script&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Los segment trees o árboles de segmentos surgieron para resolver este problema. Se pueden formular de forma incluso más general, teniendo aplicaciones en problemas relacionados con los subintervalos de un vector. Como veremos a continuación, los segment trees abordarán el range minimum query problem utilizando un preprocesamiento con eficiencia lineal tras el cual podremos realizar consultas y actualizar elementos del vector en tiempo logarítmico. Esto supone una gran mejora con respecto a las soluciones anteriores.&lt;/p&gt;

&lt;h2 id=&quot;segment-trees&quot;&gt;Segment Trees&lt;/h2&gt;

&lt;p&gt;Un segment tree es una estructura de datos que permite, a partir de un vector &lt;script type=&quot;math/tex&quot;&gt;V&lt;/script&gt;, dos operaciones:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Consultar determinada información para cualquiera de los subintervalos del vector.&lt;/li&gt;
  &lt;li&gt;Actualizar una componente del vector.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Como caso particular esta información puede ser el mínimo del subintervalo, en cuyo caso ambas operaciones pueden llevarse a cabo en tiempo logarítmico.&lt;/p&gt;

&lt;p&gt;Supongamos por el momento que el vector tiene longitud &lt;script type=&quot;math/tex&quot;&gt;n = 2^m&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;La idea subyacente consiste en preprocesar la información correspondiente a las particiones del vector formadas por subintervalos de igual longitud siendo esta una potencia de &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt;. Formalmente, estos intervalos se corresponden con &lt;script type=&quot;math/tex&quot;&gt;V[k2^l, (k+1)2^l-1]&lt;/script&gt; para &lt;script type=&quot;math/tex&quot;&gt;l \in \{0, 1, \ldots, m\}&lt;/script&gt; y &lt;script type=&quot;math/tex&quot;&gt;k \in \{0, 1, \ldots, \frac{n}{2^l}-1\}&lt;/script&gt;. Los intervalos preprocesados pueden verse como los nodos de un árbol binario construido de la siguiente forma:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;V[0,n-1]&lt;/script&gt; es la raíz.&lt;/li&gt;
  &lt;li&gt;Todo nodo que se corresponda a &lt;script type=&quot;math/tex&quot;&gt;V[i,j]&lt;/script&gt; con &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
i &lt; j %]]&gt;&lt;/script&gt; tiene dos hijos, izquierda y derecha, que se obtienen a dividir el subintervalo correspondiente en las mitades izquerda y derecha.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;La Imagen 1 muestra el árbol binario a generar si se tuviese &lt;script type=&quot;math/tex&quot;&gt;n = 8&lt;/script&gt;. Nótese que las hojas del árbol son los subintervalos con una sola componente.&lt;/p&gt;

&lt;p class=&quot;fig&quot;&gt;&lt;img src=&quot;/blog/images/segment_trees/segment_trees_visualizacion.png&quot; alt=&quot;&quot; /&gt;
&lt;strong&gt;Imagen 1.&lt;/strong&gt; Segment tree asociado a un vector &lt;script type=&quot;math/tex&quot;&gt;V&lt;/script&gt; de longitud 8 representado como un árbol binario.&lt;/p&gt;

&lt;p&gt;Tras generar el árbol binario podemos expresar un subintervalo &lt;script type=&quot;math/tex&quot;&gt;V[i, j]&lt;/script&gt; como la unión del menor número de subintervalos como los preprocesados previamente. Tiene sentido hablar de esta unión pues siempre existe (basta expresar &lt;script type=&quot;math/tex&quot;&gt;V[i, j]&lt;/script&gt; como unión de sus componentes).  Por ejemplo, para &lt;script type=&quot;math/tex&quot;&gt;n=8&lt;/script&gt; se tiene:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;V[2,7] = V[2,2] +\mkern-5mu+ V[3,4] +\mkern-5mu+ V[5,6] +\mkern-5mu+ V[7,7]&lt;/script&gt;

&lt;p&gt;Si la información que deseamos consultar puede obtenerse a partir de la información de una partición de subintervalos entonces habremos resuelto el problema. Este es el caso del range minimum query. El mínimo del subintervalo &lt;script type=&quot;math/tex&quot;&gt;V[i, j]&lt;/script&gt; es el mínimo de los mínimos obtenidos para los subintervalos preprocesados que formen una partición de &lt;script type=&quot;math/tex&quot;&gt;V[i, j]&lt;/script&gt;. Por ejemplo, si &lt;script type=&quot;math/tex&quot;&gt;V = [3,2,8,5,6,1,7,4]&lt;/script&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\min(V[2,7]) = \min\{\min(V[2,2]), \min(V[3,4]), \min(V[5,6]), \min(V[7,7])\} = \min\{2, 5, 1, 7\} = 1&lt;/script&gt;

&lt;p&gt;En lo que sigue estudiaremos cómo construir el segment tree (librándonos de la suposición &lt;script type=&quot;math/tex&quot;&gt;n= 2^m&lt;/script&gt;) y probaremos que es posible realizar una consulta y actualizar el vector de forma eficiente. Sin embargo, antes debemos saber qué operaciones tienen que realizar los nodos del segment tree para que esto sea posible.&lt;/p&gt;

&lt;h3 id=&quot;nodos-del-segment-tree&quot;&gt;Nodos del segment tree&lt;/h3&gt;

&lt;p&gt;La información relativa a los subintervalos del tipo &lt;script type=&quot;math/tex&quot;&gt;V[k2^l, (k+1)2^l-1]&lt;/script&gt; debe almacenarse en un nodo. Los subintervalos &lt;script type=&quot;math/tex&quot;&gt;V[i,i]&lt;/script&gt; son los casos base y sus nodos formarán las hojas del segment tree. Los nodos deben mantener 3 operaciones:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Asignar la información correspondiente al nodo en el caso de que este sea una hoja del árbol.&lt;/li&gt;
  &lt;li&gt;Generar la información del nodo a partir de dos nodos cuyos subintervalos sean una partición del subintervalo actual. Esta operación se denomina &lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Devolver la información del subintervalo que el nodo representa.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Una plantilla para un nodo del segment tree sería la siguiente:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Template for a Segment Tree Node.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# A node contains the information related with a vector subinterval.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SegmentTreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Init the node.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# info = Subinterval information&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Given the value of an array element,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# build the information for this leaf.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;assignLeaf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Insert the code to build the leaf information&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Merge the information of left and right&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# children to form the parent node information.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Insert the merge code&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Return the information contained in this node.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;En el caso del range minimum query asignar la información a una hoja es asignarle el valor de la componente y realizar un &lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt; es tomar el mínimo de la información de los nodos &lt;code class=&quot;highlighter-rouge&quot;&gt;left&lt;/code&gt; y &lt;code class=&quot;highlighter-rouge&quot;&gt;right&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;assignLeaf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Veremos que para que la eficiencia de las dos operaciones soportadas por el segment tree sea logarítmica las operaciones anteriores deben ser realizadas en tiempo constante, como sucede para este problema.&lt;/p&gt;

&lt;h3 id=&quot;construcción-del-segment-tree&quot;&gt;Construcción del segment tree&lt;/h3&gt;

&lt;p&gt;La construcción del segment tree consiste en crear un árbol binario como el de la Imagen 1. Sin embargo, se puede conseguir una implementación más eficiente al darse cuenta de que el árbol binario es completo. Por tanto, podemos almacenarlo en memoria mediante un heap &lt;sup id=&quot;fnref:heap&quot;&gt;&lt;a href=&quot;#fn:heap&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. Esto es, embebemos el árbol en un vector mediante un recorrido por niveles como sucede en la Imagen 2. A cada nodo le corresponde un índice del vector y para estos índices se verifica:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;IndiceHijoIzquierda(nodo) =&lt;/script&gt; &lt;script type=&quot;math/tex&quot;&gt;2nodo&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;IndiceHijoDerecha(nodo) =&lt;/script&gt; &lt;script type=&quot;math/tex&quot;&gt;2nodo+1&lt;/script&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Estas relaciones nos permiten acceder a los hijos de forma constante. Además, la longitud del vector que representa al segment tree es &lt;script type=&quot;math/tex&quot;&gt;2n-1&lt;/script&gt; donde &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; es la longitud de &lt;script type=&quot;math/tex&quot;&gt;V&lt;/script&gt;.&lt;/p&gt;

&lt;p class=&quot;fig&quot;&gt;&lt;img src=&quot;/blog/images/segment_trees/segment_trees_heap.png&quot; alt=&quot;&quot; /&gt;
&lt;strong&gt;Imagen 2.&lt;/strong&gt; Segment tree asociado a un vector &lt;script type=&quot;math/tex&quot;&gt;V&lt;/script&gt; de longitud 8 representado como un heap.&lt;/p&gt;

&lt;p&gt;Nótese que el subintervalo correspondiente a cada nodo se deduce de su índice, por lo que no es necesario almacenar esta información. Se puede construir el árbol recursivamente. Si el nodo actual es una hoja se obtiene su información mediante el método &lt;code class=&quot;highlighter-rouge&quot;&gt;assignLeaf&lt;/code&gt;. Si no se da este caso, se construyen recursivamente los dos hijos y se obtiene la información para el nodo actual aplicando el método &lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt; a ambos hijos.&lt;/p&gt;

&lt;p&gt;Con el proceso de construcción anterior obtendremos sin problemas el árbol aunque el vector no tenga como tamaño una potencia de dos. En tal caso el árbol resultante puede no ser completo. Por tanto, habrá componentes del heap en memoria sin usar. Esto nos es irrelevante puesto que el tamaño del heap será a lo sumo &lt;script type=&quot;math/tex&quot;&gt;2m-1&lt;/script&gt; donde &lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt; es la menor potencia de 2 mayor que &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; (si extendemos el vector con elementos nulos hasta que tenga longitud &lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt; y construimos este heap necesitaremos un vector de longitud &lt;script type=&quot;math/tex&quot;&gt;2m-1&lt;/script&gt;). Por tanto, la memoria utilizada será &lt;script type=&quot;math/tex&quot;&gt;\theta(n)&lt;/script&gt; en cualquier caso.&lt;/p&gt;

&lt;p&gt;El siguiente código proporciona un constructor para la clase &lt;code class=&quot;highlighter-rouge&quot;&gt;SegmentTree&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SegmentTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Build a segment tree from the given array.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# array: Array from which the segment tree is built.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# st_index: current segment tree node index.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# lo and hi : Range of input array subinterval that this node is responsible of.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_buildTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# The node is a leaf responsible of V[lo,lo]&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assignLeaf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# The node is not a leaf.&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# Both children are built and merged afterwards for this node.&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st_index&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_buildTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_buildTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Get the segment tree size for a input of size N.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# It compute the smallest 2 to the power of m greater than N.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_getSegmentTreeSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Initializes a Segment Tree.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# array : Array from which the segment tree is built.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Node : Class that will be used as a segment tree node.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#   It obtains the desired information from the array.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SegmentTreeNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Segment tree size (number of nodes)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SegmentTree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_getSegmentTreeSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Heap with the nodes&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SegmentTreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# The tree is built&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_buildTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Como se construyen menos de &lt;script type=&quot;math/tex&quot;&gt;4n-1&lt;/script&gt; nodos, el proceso anterior es &lt;script type=&quot;math/tex&quot;&gt;\theta(n \max(a(n), m(n)))&lt;/script&gt; donde &lt;script type=&quot;math/tex&quot;&gt;a(n)&lt;/script&gt; es la eficiencia del método &lt;code class=&quot;highlighter-rouge&quot;&gt;assignLeaf&lt;/code&gt; y &lt;script type=&quot;math/tex&quot;&gt;m(n)&lt;/script&gt; es la eficiencia del método &lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;En el caso del range minimum query la eficiencia obtenida es lineal como se había pronosticado.&lt;/p&gt;

&lt;h3 id=&quot;operación-1-consultas&quot;&gt;Operación 1: Consultas&lt;/h3&gt;

&lt;p&gt;Para realizar una consulta debemos encontrar la descomposición de &lt;script type=&quot;math/tex&quot;&gt;V[i,j]&lt;/script&gt; en el menor número posible de nodos del árbol. Esto se puede consequir de forma recursiva. Partimos del nodo raíz. Se distinguen los siguientes casos:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Si &lt;script type=&quot;math/tex&quot;&gt;V[i,j]&lt;/script&gt; es el subintervalo que corresponde al nodo actual se devuelve la información contenida en el nodo.&lt;/li&gt;
  &lt;li&gt;Si &lt;script type=&quot;math/tex&quot;&gt;V[i,j]&lt;/script&gt; es un subintervalo del subintervalo del hijo izquierda se devuelve el resultado de la búsqueda obtenida para el hijo izquierda.&lt;/li&gt;
  &lt;li&gt;Si &lt;script type=&quot;math/tex&quot;&gt;V[i,j]&lt;/script&gt; es un subintervalo del subintervalo del hijo derecha se devuelve el resultado de la búsqueda obtenida para el hijo derecha.&lt;/li&gt;
  &lt;li&gt;Si &lt;script type=&quot;math/tex&quot;&gt;V[i,j]&lt;/script&gt; tiene elementos en ambos hijos se obtiene el valor de la consulta haciendo un &lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt; de la información obtenida para el sector relativo al hijo izquierda y el sector relativo al hijo derecha.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;El siguiente código realiza la operación descrita:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c&quot;&gt;# Get recursively a SegmentTreeNode with the information associated with the range [lo, hi].&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# st_index : Current Segment Tree Node. It is responsible of [left, right] range.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_getInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Check if the range is the current node in the tree.&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# In that case return it.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# Look for the range in the children of the current node&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# if it could be just there.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_getInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_getInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# If we keep executing the method then the range is divided between&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# the left child and the right child of the current node. Let's get&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# each part of the range and merge it.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;left_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_getInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;right_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_getInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SegmentTreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Get the value associated with the range [lo, hi]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_getInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Es claro que si el subintervalo es precisamente uno de los que se tienen almacenados en el árbol entonces el tiempo de la consulta es &lt;script type=&quot;math/tex&quot;&gt;O(\log n)&lt;/script&gt;. ¿Qué sucede en cualquier otro caso?&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Proposición&lt;/dt&gt;
  &lt;dd&gt;El tiempo de consulta para cualquier subintervalo es &lt;script type=&quot;math/tex&quot;&gt;O(m(n)\log n)&lt;/script&gt;, donde &lt;script type=&quot;math/tex&quot;&gt;m(n)&lt;/script&gt; es la eficiencia del método &lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt;.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;strong&gt;Demostración&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;La implementación previa consiste en una búsqueda en profundidad pues es más cómoda de programar. Sin embargo, en la prueba es más útil ver el algoritmo como una búsqueda en anchura. Puesto que ambas búsquedas visitarían los mismos nodos, podemos situarnos en esta última. Definimos una iteración del algoritmo como procesar todos los nodos de un nivel &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt; del árbol. Tras una iteración los nodos que quedan activos pertenecen al siguiente nivel del árbol.&lt;/p&gt;

&lt;p&gt;Buscamos la información del subintervalo &lt;script type=&quot;math/tex&quot;&gt;V[i,j]&lt;/script&gt;. Podemos observar que de una iteración a otra se mantiene la búsqueda sobre a lo sumo dos nuevos nodos. Además, estos nodos son precisamente aquellos cuyos subinvervalos contienen a las componentes i-ésima y j-ésima respectivamente.&lt;/p&gt;

&lt;p&gt;En efecto, esto se prueba por inducción sobre el nivel del árbol en el que nos encontremos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Para la raíz (nivel 1) esto es evidente pues el algoritmo, en el peor de los casos, prosigue con los dos hijos.&lt;/li&gt;
  &lt;li&gt;Supongamos cierta la afirmación para el nivel &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
t &lt; \log_2 n %]]&gt;&lt;/script&gt; y veamos que se cumple para &lt;script type=&quot;math/tex&quot;&gt;t+1&lt;/script&gt;. Por la hipótesis de inducción, la búsqueda se mantiene a lo sumo en dos nodos. Si no hubiese nodos activos hemos terminado. Si por el contrario solo hubiese un nodo activo el resultado también es evidente (el nodo activo se divide como mucho en dos). Por último, si hay dos nodos activos verificando la hipótesis de inducción se tiene que &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
i &lt; j %]]&gt;&lt;/script&gt; (los nodos tienen subintervalos disjuntos). Cada uno de los nodos activos puede dividir la búsqueda como mucho sobre sus dos hijos. Para el nodo izquierda (el que contiene la componente &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;) se tienen las siguientes opciones:
    &lt;ul&gt;
      &lt;li&gt;El subintervalo del nodo está contenido en &lt;script type=&quot;math/tex&quot;&gt;V[i,j]&lt;/script&gt; en cuyo caso se para la búsqueda en esa rama.&lt;/li&gt;
      &lt;li&gt;El subintervalo que buscamos está contenido en el hijo derecha (tiene intersección vacía con el hijo izquierda). En tal caso se añade ese nodo a la búsqueda.&lt;/li&gt;
      &lt;li&gt;El subintervalo que buscamos tiene intersección no vacía con el hijo izquierda. Entonces, este hijo se añade a la búsqueda. El subintervalo del hijo derecha está contenido en &lt;script type=&quot;math/tex&quot;&gt;V[i,j]&lt;/script&gt; (está acotado por &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; y por &lt;script type=&quot;math/tex&quot;&gt;j&lt;/script&gt;). Por tanto, no hay que continuar la búsqueda con el hijo derecha. Cuando finalice la búsqueda en el hijo izquierda se realizará un &lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt; entre la información de ambos hijos.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En cualquier caso, se añade a lo sumo un hijo a la búsqueda. Lo mismo sucede con el nodo que contiene a &lt;script type=&quot;math/tex&quot;&gt;j&lt;/script&gt;, verificándose, por tanto, la afirmación.&lt;/p&gt;

&lt;p&gt;Como consecuencia, el número de nodos que se visitan está acotado por &lt;script type=&quot;math/tex&quot;&gt;4 \log n&lt;/script&gt; . A cada nodo visitado le corresponde como mucho una operación de &lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt;. Por tanto, la consulta es &lt;script type=&quot;math/tex&quot;&gt;O(m(n)\log n)&lt;/script&gt;.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\tag*{$\blacksquare$}&lt;/script&gt;

&lt;p&gt;Nótese que para &lt;script type=&quot;math/tex&quot;&gt;V[1,n-2]&lt;/script&gt; con &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; potencia de &lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt; se realizan precisamente &lt;script type=&quot;math/tex&quot;&gt;\Omega(m(n)\log n)&lt;/script&gt; operaciones, luego la cota dada para la eficiencia del algoritmo es la mejor posible. Como pronosticábamos, si el &lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt; es constante entonces la consulta es logarítmica.&lt;/p&gt;

&lt;h3 id=&quot;operación-2-actualización-de-una-componente-del-vector&quot;&gt;Operación 2: Actualización de una componente del vector&lt;/h3&gt;

&lt;p&gt;Con la operación anterior ya habríamos resuelto la versión básica del range minimum query. Veamos que también podemos actualizar componentes del vector eficientemente y de forma sencilla.&lt;/p&gt;

&lt;p&gt;En primer lugar, habría que actualizar la hoja correspondiente a la componente del vector. Después hay que arreglar los desperfectos que esto haya podido causar a sus antecesores. Para ello habrá que recorrer el camino que une la hoja con la raíz.&lt;/p&gt;

&lt;p&gt;La implementación más sencilla de este proceso es recursiva. Realizamos una búsqueda en profundidad desde la raíz hasta la hoja correspondiente que actualizaremos mediante la operación &lt;code class=&quot;highlighter-rouge&quot;&gt;assignLeaf&lt;/code&gt;. Posteriormente, se irán actualizando los antecesores en orden mediante operaciones &lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt; de sus hijos, que ya están actualizados.&lt;/p&gt;

&lt;p&gt;El siguiente código realiza la operación descrita:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c&quot;&gt;# Update the segment tree.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# The given value is assigned to the array's component at index place.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# The segment tree is updated accordingly in a recursive way.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# st_index : Current segment tree node index.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# lo and hi : The current range is [lo, hi]&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# index : Array's component to be updated.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# value : New value for the array's component to update.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# If current node is a leaf we have ended the search.&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# The value information is assigned to the leaf.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assignLeaf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# If the current node is not a leaf, the search continues recursively&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# and the current node information is updated afterwards.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st_index&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# Continue the search by the correct path&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# Update current node information&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Update the segment tree.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# The given value is assigned to the array's&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# component at index place. The segment tree is updated accordingly.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# index : Array's component to be updated.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# value : New value for the array's component to update.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;La eficiencia es claramente &lt;script type=&quot;math/tex&quot;&gt;\theta(m(n) \log n + a(n))&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Una mejor implementación es una versión iterativa del proceso. Comenzamos en la hoja y recorremos el camino desde esta a la raíz usando el siguiente hecho:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;IndicePadre(nodo) = \frac{nodo}{2}&lt;/script&gt;

&lt;p&gt;Si en determinado momento la información de un nodo a actualizar no cambia con el &lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt; se finaliza algoritmo. Sin embargo, aunque podamos terminar la ejecución antes, la eficiencia en el peor caso sigue siendo &lt;script type=&quot;math/tex&quot;&gt;\theta(m(n) \log n + a(n))&lt;/script&gt;. Se necesitaría, además, un nuevo método &lt;code class=&quot;highlighter-rouge&quot;&gt;isSameInfo&lt;/code&gt; que nos indique si la información que se le pasa como argumento es la misma que la contenida por el nodo. Este método debe ser &lt;script type=&quot;math/tex&quot;&gt;O(m(n))&lt;/script&gt; para que la implementación sea rentable. El siguiente código contiene esta nueva versión del algoritmo:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c&quot;&gt;# Update the segment tree.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# The given value is assigned to the array's&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# component at index place. The segment tree is updated accordingly.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# index : Array's component to be updated.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# value : New value for the array's component to update.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;st_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Leaf index&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Update leaf and array&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assignLeaf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Update leaf ancestors&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;st_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# Get current info and update it with a merge from the children&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;current_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# If the info has not changed then the algorithm ends&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isSameInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# Go to node's parent&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;st_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;problemas&quot;&gt;Problemas&lt;/h2&gt;

&lt;p&gt;Los siguientes problemas son útiles para practicar con los segment trees.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Dado un vector &lt;script type=&quot;math/tex&quot;&gt;V&lt;/script&gt; con &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; elementos, se pide realizar &lt;script type=&quot;math/tex&quot;&gt;Q&lt;/script&gt; consultas. Cada consulta consiste en obtener la media del subintervalo &lt;script type=&quot;math/tex&quot;&gt;V[i,j]&lt;/script&gt;. Desarrollar un algoritmo para este cometido.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dado un vector &lt;script type=&quot;math/tex&quot;&gt;V&lt;/script&gt; con &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; elementos, se pide realizar &lt;script type=&quot;math/tex&quot;&gt;Q&lt;/script&gt; consultas. Cada consulta consiste en obtener la suma de los elementos del subintervalo &lt;script type=&quot;math/tex&quot;&gt;V[i,j]&lt;/script&gt;. Encontrar una estructura de datos con preprocesamiento lineal y tiempo de consulta constante (diferente al segment tree) que resuelva el problema. ¿Es válida la solución si en lugar de la suma se utilizase la operación OR lógica de los números en binario? ¿Por qué? Extender el algoritmo a este último caso, estudiar las nuevas eficiencias obtenidas y compararlas con las de una solución basada en segment trees.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackerrank.com/contests/hindley-milner-feb14/challenges/range-minimum-query&quot;&gt;Hackerrank - Functional Programming Contest - Range Minimum Query&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.hackerrank.com/contests/indeed-prime-challenge/challenges/minimum-product-sub-interval&quot;&gt;Hackerrank - Minimum Product Subinterval&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ahmed-aly.com/Category.jsp?ID=25&quot;&gt;90 Segment Trees Problems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;código&quot;&gt;Código&lt;/h2&gt;

&lt;p&gt;Todo el código proporcionado se encuentra en un único &lt;a href=&quot;https://github.com/andreshp/Algorithms/tree/master/DataStructures/SegmentTree&quot;&gt;archivo en Python&lt;/a&gt;. Una implementación similar se puede encontrar en C++ &lt;sup id=&quot;fnref:segment-c&quot;&gt;&lt;a href=&quot;#fn:segment-c&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h2 id=&quot;para-profundizar&quot;&gt;Para profundizar&lt;/h2&gt;

&lt;p&gt;Los siguientes enlaces profundizan en la temática. Incluyen desde operaciones más avanzadas, como el uso de lazy propagation, hasta la relación del range minimum query con otros problemas, como el lowest common ancestor. Espero tratar estos temas en un futuro próximo.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kartikkukreja.wordpress.com/2015/01/10/a-simple-approach-to-segment-trees-part-2/&quot;&gt;A simple approach to segment trees, part 2 - Kartik Kukreja&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://community.topcoder.com/tc?module=Static&amp;amp;d1=tutorials&amp;amp;d2=lowestCommonAncestor#Segment_Trees&quot;&gt;Range Minimum Query and Lowest Common Ancestor - danielp - TopCoder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;referencias&quot;&gt;Referencias&lt;/h2&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:list&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_data_structures&quot;&gt;List of Data Structures&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:list&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:heap&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=B7hVxCmfPtM&quot;&gt;Heaps and Heapsort, MIT 6.006 Introduction to Algorithms, Fall 2011&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:heap&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:segment-c&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://kartikkukreja.wordpress.com/2014/11/09/a-simple-approach-to-segment-trees/&quot;&gt;A simple approach to segment trees - Kartik Kukreja&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:segment-c&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
            <pubDate>Fri, 17 Jul 2015 00:00:00 +0000</pubDate>
            <link>http://libreim.github.io/blog/2015/07/17/segment-tree/</link>
            <guid isPermaLink="true">http://libreim.github.io/blog/2015/07/17/segment-tree/</guid>
        </item>
        
        <item>
            <title>Teorema de Dini</title>
            <description>&lt;h2 id=&quot;convergencia-puntual-y-convergencia-uniforme&quot;&gt;Convergencia Puntual y Convergencia Uniforme&lt;/h2&gt;

&lt;p&gt;En el Análisis Matemático es frecuente que la función solución a determinado problema sea desconocida o no la podamos expresar en términos de las funciones elementales que conocemos. Incluso en las funciones más simples, como la exponencial o el logaritmo, nos encontramos esta situación. Conocemos su existencia y propiedades características pero tenemos ciertas dificultades a la hora de evaluarlas en un punto. Es frecuente para ello utilizar los famosos polinomios de Taylor, en cuyo caso estamos aproximando la función por polinomios.&lt;/p&gt;

&lt;p&gt;En más situaciones es habitual disponer de funciones que se aproximan cada vez más a la solucion del problema. Para formalizar este hecho surge el concepto de convergencia para sucesiones de funciones. Podemos distinguir dos tipos de convergencia: convergencia puntual y convergencia uniforme.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Definición 1&lt;/dt&gt;
  &lt;dd&gt;Sea &lt;script type=&quot;math/tex&quot;&gt;A \subseteq \mathbb{R}&lt;/script&gt; y &lt;script type=&quot;math/tex&quot;&gt;\{f_n\}&lt;/script&gt; una sucesión de funciones con &lt;script type=&quot;math/tex&quot;&gt;\ f_n : A \rightarrow \mathbb{R}&lt;/script&gt;. Se dice que &lt;script type=&quot;math/tex&quot;&gt;\{f_n\}&lt;/script&gt; &lt;strong&gt;converge puntualmente&lt;/strong&gt; en &lt;script type=&quot;math/tex&quot;&gt;x \in A&lt;/script&gt; si la sucesión &lt;script type=&quot;math/tex&quot;&gt;\{f_n(x)\}&lt;/script&gt; converge. Podemos considerar el conjunto &lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt; de los elementos &lt;script type=&quot;math/tex&quot;&gt;x \in A&lt;/script&gt; en los que hay convergencia puntual y definir la &lt;strong&gt;función límite&lt;/strong&gt;:&lt;/dd&gt;
  &lt;dd&gt;
    &lt;script type=&quot;math/tex; mode=display&quot;&gt;f : C \rightarrow \mathbb{R}, \ f(x) = \lim f_n(x) \ \forall x \in C&lt;/script&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;!--more--&gt;

&lt;p&gt;Nótese que la definición es puramente topológica para espacios con unicidad del límite (como los espacios de Hausdorff). Sin embargo, para que todo lector pueda seguir el texto sin un curso inicial de topología trabajaremos solamente con conjuntos de números reales.&lt;/p&gt;

&lt;p&gt;Podemos exigirle más a la convergencia puntual y obtener la convergencia uniforme:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Definición 2&lt;/dt&gt;
  &lt;dd&gt;Sea &lt;script type=&quot;math/tex&quot;&gt;A \subseteq \mathbb{R}&lt;/script&gt; y &lt;script type=&quot;math/tex&quot;&gt;\{f_n\}&lt;/script&gt; una sucesión de funciones con &lt;script type=&quot;math/tex&quot;&gt;\ f_n : A \rightarrow \mathbb{R}&lt;/script&gt;. Se dice que &lt;script type=&quot;math/tex&quot;&gt;\{f_n\}&lt;/script&gt; &lt;strong&gt;converge uniformemente&lt;/strong&gt; en &lt;script type=&quot;math/tex&quot;&gt;B \subseteq A&lt;/script&gt; si para cada &lt;script type=&quot;math/tex&quot;&gt;\varepsilon &gt; 0&lt;/script&gt; existe &lt;script type=&quot;math/tex&quot;&gt;n_o \in \mathbb{N}&lt;/script&gt; tal que:&lt;/dd&gt;
  &lt;dd&gt;
    &lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\forall n \ge n_o : \left| f_n(x) - f(x) \right| &lt; \varepsilon \ \forall x \in B %]]&gt;&lt;/script&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;La convergencia uniforme implica la convergencia puntual, pero el recíproco no es cierto. Un ejemplo de este caso es el siguiente, que se deja como ejercicio para el lector.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Ejemplo 1&lt;/dt&gt;
  &lt;dd&gt;Probar que la siguiente sucesión de funciones converge puntualmente pero no converge uniformemente en &lt;script type=&quot;math/tex&quot;&gt;[0,1]&lt;/script&gt;:&lt;/dd&gt;
  &lt;dd&gt;
    &lt;script type=&quot;math/tex; mode=display&quot;&gt;f_n : [0,1] \rightarrow \mathbb{R}, \ f_n(x) = x^n \ \forall x \in [0,1]&lt;/script&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Cabe preguntarse para qué sirve la convergencia uniforme. Intuitivamente, nos dice que la sucesión de funciones converge con igual rapidez en todo &lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt;. Analíticamente podemos sacarle provecho al relacionarla con conceptos como la continuidad, la derivabilidad y la integral. Por ejemplo, en todo curso de análisis en el que se trate este tema se demuestra que si la convergencia es uniforme y las funciones que conforman la sucesión son continuas, entonces la función límite es continua. En definitiva, la convergencia uniforme nos permite obtener información analítica de la función límite exigiendo ciertas propiedades a las funciones que conforman la sucesión.&lt;/p&gt;

&lt;p&gt;Sin embargo, muchos de los ejercicios a realizar en el correspondiente curso simplemente piden estudiar la convergencia uniforme de una sucesión de funciones. A veces esto se vuelve tedioso como es el caso del siguiente ejercicio &lt;sup id=&quot;fnref:ejercicios&quot;&gt;&lt;a href=&quot;#fn:ejercicios&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Ejemplo 2&lt;/dt&gt;
  &lt;dd&gt;Estudia la convergencia puntual y uniforme de la sucesión de funciones &lt;script type=&quot;math/tex&quot;&gt;\{f_n\}&lt;/script&gt; donde &lt;script type=&quot;math/tex&quot;&gt;\ f_n : \mathbb{R} \rightarrow \mathbb{R}&lt;/script&gt; está definida por:&lt;/dd&gt;
  &lt;dd&gt;
    &lt;script type=&quot;math/tex; mode=display&quot;&gt;f_n(x) = \left(1+\frac{x^2}{n}\right)^n \ \forall x \in \mathbb{R}&lt;/script&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;strong&gt;Solución.&lt;/strong&gt; Usando que&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\lim_{x \rightarrow \infty}\left(1+\frac{1}{x}\right)^x = e&lt;/script&gt;

&lt;p&gt;Se obtiene&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\lim_{n \rightarrow \infty}\left(1+\frac{x^2}{n}\right)^n = \exp\left(x^2\right)&lt;/script&gt;

&lt;p&gt;Luego la función límite es &lt;script type=&quot;math/tex&quot;&gt;\ f(x) = \exp\left(x^2\right)&lt;/script&gt; en todo &lt;script type=&quot;math/tex&quot;&gt;\mathbb{R}&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;No hay convergencia uniforme en ninguna semirrecta de &lt;script type=&quot;math/tex&quot;&gt;\mathbb{R}&lt;/script&gt; pues para &lt;script type=&quot;math/tex&quot;&gt;x_n = \sqrt n&lt;/script&gt; se tiene que&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\lim_{n \rightarrow \infty} f_n(x_n) - f(x_n) = \lim_{n \rightarrow \infty}\left(1+\frac{n}{n}\right)^n - e^n = \lim_{n \rightarrow \infty} 2^n - e^n = -\infty&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\lim_{n \rightarrow \infty} f_n(-x_n) - f(-x_n) = \lim_{n \rightarrow \infty} f_n(x_n) - f(x_n) = -\infty&lt;/script&gt;

&lt;p&gt;y de haber convergencia uniforme para cualquier sucesión de números reales &lt;script type=&quot;math/tex&quot;&gt;\{x_n\}&lt;/script&gt; se verificaría que la sucesión &lt;script type=&quot;math/tex&quot;&gt;\{f_n(x_n) - f(x_n)\}&lt;/script&gt; converge a 0.&lt;/p&gt;

&lt;p&gt;Sin embargo, sí hay convergencia uniforme en los intervalos del tipo &lt;script type=&quot;math/tex&quot;&gt;[-\alpha, \alpha]&lt;/script&gt; para &lt;script type=&quot;math/tex&quot;&gt;\alpha &gt; 0&lt;/script&gt; como probaremos a continuación. Puede el lector saltarse este tedioso desarrollo ya que conseguiremos el mismo resultado aplicando el teorema de Dini.&lt;/p&gt;

&lt;p&gt;Sea &lt;script type=&quot;math/tex&quot;&gt;\alpha &gt; 0&lt;/script&gt;. Definimos la siguiente función, que resulta ser continua:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\phi(t) = \frac{\log(1+t)}{t}, \ \forall -1 &lt; t \neq 0, \phi(0) = 1 %]]&gt;&lt;/script&gt;

&lt;p&gt;Tenemos que&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\left| \left(1+\frac{x^2}{n}\right)^n - \exp\left(x^2\right) \right| =
\exp\left(x^2\right) \left| \left(\frac{\left(1+\frac{x^2}{n}\right)^\frac{n}{x^2}}{e}\right)^{x^2} - 1 \right| =&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\exp\left(x^2\right) \left| \exp\left( x^2\left(\phi\left(\frac{x^2}{n}\right) - 1\right)\right) -1 \right| \le
\exp\left(\alpha^2  \right) \left| \exp\left( x^2\left(\phi \left(\frac{x^2}{n}\right) - 1\right)\right) -1 \right|&lt;/script&gt;

&lt;p&gt;Sea &lt;script type=&quot;math/tex&quot;&gt;\varepsilon &gt; 0&lt;/script&gt;, utilizaremos la continuidad de &lt;script type=&quot;math/tex&quot;&gt;\phi&lt;/script&gt; junto con la continuidad de la función exponencial para obtener el resultado deseado.&lt;/p&gt;

&lt;p&gt;Por la continuidad de la exponencial en 0, existe &lt;script type=&quot;math/tex&quot;&gt;\delta_1 &gt; 0&lt;/script&gt; tal que si &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\vert u \vert &lt; \delta_1 %]]&gt;&lt;/script&gt; entonces &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\ \vert e^u -1 \vert &lt; \frac{\varepsilon}{\exp\left(\alpha^2\right)} %]]&gt;&lt;/script&gt;. Aplicamos ahora la continuidad de &lt;script type=&quot;math/tex&quot;&gt;\phi&lt;/script&gt; en 0 para obtener &lt;script type=&quot;math/tex&quot;&gt;\delta_2 &gt; 0&lt;/script&gt; tal que si &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\ \vert t\vert &lt; \delta_2 %]]&gt;&lt;/script&gt; entonces &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\ \vert \phi(t) -1\vert &lt; \frac{\delta_1}{\alpha^2} %]]&gt;&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Tomemos &lt;script type=&quot;math/tex&quot;&gt;n_0 \in \mathbb{N}&lt;/script&gt; tal que &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\frac{\alpha^2}{n_0} &lt; \delta_2 %]]&gt;&lt;/script&gt;. Entonces, para todo &lt;script type=&quot;math/tex&quot;&gt;x \in [-\alpha, \alpha]&lt;/script&gt; y &lt;script type=&quot;math/tex&quot;&gt;n \ge n_0&lt;/script&gt; se tiene que:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\frac{x^2}{n} &lt; \delta_2 \Rightarrow
\left| \phi \left(\frac{x^2}{n}\right) -1\right| &lt; \frac{\delta_1}{\alpha^2} \Rightarrow
\left| x^2 \left( \phi \left(\frac{x^2}{n}\right) -1 \right) \right| &lt; \delta_1 \Rightarrow %]]&gt;&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\left| \exp\left(x^2\left(\phi \left(\frac{x^2}{n}\right) - 1\right)\right) - 1\right| &lt; \frac{\varepsilon}{\exp(\alpha^2)} %]]&gt;&lt;/script&gt;

&lt;p&gt;De donde se deduce que&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\left| \left(1+\frac{x^2}{n}\right)^n - \exp\left(x^2\right) \right| \le \exp\left(\alpha^2\right) \left| \exp\left( x\left(\phi \left(\frac{x^2}{n}\right) - 1\right)\right) -1\right| &lt; \varepsilon %]]&gt;&lt;/script&gt;

&lt;p&gt;Se ha obtenido la definición de convergencia uniforme en &lt;script type=&quot;math/tex&quot;&gt;[-\alpha, \alpha]&lt;/script&gt;. Nótese que esto implica que hay convergencia uniforme en cualquier intervalo cerrado y acotado.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\tag*{$\blacksquare$}&lt;/script&gt;

&lt;h2 id=&quot;teorema-de-dini&quot;&gt;Teorema de Dini&lt;/h2&gt;

&lt;p&gt;El teorema de Dini es uno de los pocos resultados que transforman la convergencia puntual en convergencia uniforme. Podremos aplicarlo en intervalos del tipo &lt;script type=&quot;math/tex&quot;&gt;[a, b]&lt;/script&gt; si se verifican ciertas condiciones, como veremos que sucede en el ejemplo anterior.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Enunciado&lt;/dt&gt;
  &lt;dd&gt;Sean &lt;script type=&quot;math/tex&quot;&gt;a,b \in \mathbb{R}&lt;/script&gt; y &lt;script type=&quot;math/tex&quot;&gt;\ f_n : [a,b] \rightarrow \mathbb{R}&lt;/script&gt; continua para todo &lt;script type=&quot;math/tex&quot;&gt;n \in \mathbb{N}&lt;/script&gt;. Se considera la sucesión de funciones &lt;script type=&quot;math/tex&quot;&gt;\{f_n\}&lt;/script&gt;. Si la sucesión es monótona y converge puntualmente a &lt;script type=&quot;math/tex&quot;&gt;\ f&lt;/script&gt; continua, entonces la convergencia es uniforme.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;strong&gt;Demostración&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;El gran salto de la convergencia puntual a la convergencia uniforme se va a producir gracias a la continuidad de todas las funciones, la monotonía de la sucesión y la compacidad del dominio.&lt;/p&gt;

&lt;p&gt;En la prueba se utilizará el concepto de entorno de un punto para simplificar la redacción al aplicar la continuidad. Un entorno de &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; es un conjunto que contiene a un abierto del espacio que a su vez contiene a &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;. En nuestro caso, los abiertos son los intervalos abiertos intersecados con &lt;script type=&quot;math/tex&quot;&gt;[a, b]&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Supongamos en primer lugar que &lt;script type=&quot;math/tex&quot;&gt;\{f_n\}&lt;/script&gt; es creciente. Nótese que en tal caso &lt;script type=&quot;math/tex&quot;&gt;\ f(x) \ge f_n(x)&lt;/script&gt; para todo &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; y &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;. Sea &lt;script type=&quot;math/tex&quot;&gt;\varepsilon &gt; 0&lt;/script&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;De la convergencia puntual se tiene que para todo &lt;script type=&quot;math/tex&quot;&gt;x \in [a,b]&lt;/script&gt; existe un natural &lt;script type=&quot;math/tex&quot;&gt;n_x&lt;/script&gt; tal que&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\forall n \ge n_x : \left| f_n(x) - f(x) \right| &lt; \frac{\varepsilon}{3} %]]&gt;&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;De la continuidad de &lt;script type=&quot;math/tex&quot;&gt;\ f&lt;/script&gt; y &lt;script type=&quot;math/tex&quot;&gt;\ f_n&lt;/script&gt; se tiene que para todo &lt;script type=&quot;math/tex&quot;&gt;x \in [a,b]&lt;/script&gt; existe un entorno &lt;script type=&quot;math/tex&quot;&gt;V_x&lt;/script&gt; de &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; tal que para todo elemento &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt; del entorno se verifica:&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\left| f_n(y) - f_n(x) \right| &lt; \frac{\varepsilon}{3} %]]&gt;&lt;/script&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\left| f(y) - f(x) \right| &lt; \frac{\varepsilon}{3} %]]&gt;&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Utilizando la desigualdad triangular se obtiene que para todo &lt;script type=&quot;math/tex&quot;&gt;y \in V_x&lt;/script&gt; se cumple:&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\left| f(y) - f_{n_x}(y) \right| \le \left| f(y) - f(x) \right| + \left| f(x) - f_{n_x}(x) \right| + \left| f_{n_x}(x) - f_{n_x}(y) \right| &lt; \frac{\varepsilon}{3} + \frac{\varepsilon}{3} + \frac{\varepsilon}{3} &lt; \varepsilon %]]&gt;&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Como &lt;script type=&quot;math/tex&quot;&gt;[a,b] = \cup_{x \in [a,b]} V_x&lt;/script&gt;, usando la caracterización topológica de la compacidad, existen &lt;script type=&quot;math/tex&quot;&gt;x_1, \ldots, x_m \in [a,b]&lt;/script&gt; tales que:&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;[a,b] = \bigcup_{i = 1}^m V_{x_i}&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tomamos &lt;script type=&quot;math/tex&quot;&gt;n_0 = \max\{n_{x_i}: i = 1, \ldots, m\}&lt;/script&gt;. Veamos que efectivamente se da la convergencia uniforme. Sean &lt;script type=&quot;math/tex&quot;&gt;n \ge n_0, y \in [a,b]&lt;/script&gt;. Aplicando la igualdad obtenida en &lt;strong&gt;(4)&lt;/strong&gt;, debe existir &lt;script type=&quot;math/tex&quot;&gt;i \in \{1, \ldots, m\}&lt;/script&gt; tal que &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt; pertenece a &lt;script type=&quot;math/tex&quot;&gt;V_{x_i}&lt;/script&gt;. Juntando este hecho con &lt;strong&gt;(3)&lt;/strong&gt; y la monotonía:&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\left| f(y) - f_n(y) \right| = f(y) - f_n(y) \le f(y) - f_{n_0}(y) \le f(y) - f_{n_{x_i}}(y) &lt; \varepsilon %]]&gt;&lt;/script&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Por otro lado, si &lt;script type=&quot;math/tex&quot;&gt;\{f_n\}&lt;/script&gt; es decreciente, basta aplicar lo anterior a  &lt;script type=&quot;math/tex&quot;&gt;\{-f_n\}&lt;/script&gt;, que es creciente y converge a &lt;script type=&quot;math/tex&quot;&gt;\ -f&lt;/script&gt;. Fácilmente se extrapola su convergencia uniforrme a la de &lt;script type=&quot;math/tex&quot;&gt;\{f_n\}&lt;/script&gt;.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\tag*{$\blacksquare$}&lt;/script&gt;

&lt;p&gt;Nótese que análogamente se podría haber probado este resultado:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Teorema de Dini (en espacios topológicos)&lt;/dt&gt;
  &lt;dd&gt;Sean &lt;script type=&quot;math/tex&quot;&gt;(X, \mathcal{T})&lt;/script&gt; un espacio topológico compacto y sea &lt;script type=&quot;math/tex&quot;&gt;\ f_n : X \rightarrow \mathbb{R}&lt;/script&gt; continua para todo &lt;script type=&quot;math/tex&quot;&gt;n \in \mathbb{N}&lt;/script&gt;. Se considera la sucesión de funciones &lt;script type=&quot;math/tex&quot;&gt;\{f_n\}&lt;/script&gt;. Si la sucesión es monótona y converge puntualmente a &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; continua, entonces la convergencia es uniforme.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;La exigencia de continuidad a la función límite no supone una condición extra para poder aplicar el teorema. Recordemos que en caso de que haya convergencia uniforme se tiene automáticamente la continuidad de la función límite ya que las funciones &lt;script type=&quot;math/tex&quot;&gt;\ f_n&lt;/script&gt; son continuas.&lt;/p&gt;

&lt;p&gt;Volvemos al Ejemplo 2 cuya resolución será una mera consecuencia del teorema de Dini.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Ejemplo 2&lt;/dt&gt;
  &lt;dd&gt;Estudia la convergencia puntual y uniforme de la sucesión de funciones &lt;script type=&quot;math/tex&quot;&gt;\{f_n\}&lt;/script&gt; donde &lt;script type=&quot;math/tex&quot;&gt;f_n : [0,1] \rightarrow \mathbb{R}&lt;/script&gt; está definida por:&lt;/dd&gt;
  &lt;dd&gt;
    &lt;script type=&quot;math/tex; mode=display&quot;&gt;f_n(x) = \left(1+\frac{x^2}{n}\right)^n \ \forall x \in \mathbb{R}&lt;/script&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;strong&gt;Solución.&lt;/strong&gt; Se había obtenido que la sucesión convergía puntualmente a &lt;script type=&quot;math/tex&quot;&gt;\exp\left(x^2\right)&lt;/script&gt;. Además, no había convergencia uniforme en ninguna semirrecta. Veamos que sí hay convergencia uniforme en los intervalos cerrados y acotados.&lt;/p&gt;

&lt;p&gt;Sean &lt;script type=&quot;math/tex&quot;&gt;a, b \in \mathbb{R}&lt;/script&gt; con &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
a &lt; b %]]&gt;&lt;/script&gt;. En &lt;script type=&quot;math/tex&quot;&gt;[a, b]&lt;/script&gt; la sucesión verifica las condiciones del teorema de Dini:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Las funciones &lt;script type=&quot;math/tex&quot;&gt;\ f_n&lt;/script&gt; y &lt;script type=&quot;math/tex&quot;&gt;\ f&lt;/script&gt; son continuas.&lt;/li&gt;
  &lt;li&gt;Las sucesiones &lt;script type=&quot;math/tex&quot;&gt;\ f_n&lt;/script&gt; son crecientes. En efecto, aplicando la desigualdad de las medias &lt;sup id=&quot;fnref:medias&quot;&gt;&lt;a href=&quot;#fn:medias&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; para &lt;script type=&quot;math/tex&quot;&gt;x_1 = 1, x_i = 1+\frac{x^2}{n} \ \forall i = 2, \ldots, n+1&lt;/script&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\sqrt[n+1]{\left(1+\frac{x^2}{n}\right)^n} &lt; \frac{1 + n \left(1+\frac{x^2}{n}\right)}{n+1} = 1 + \frac{x^2}{n+1} %]]&gt;&lt;/script&gt;

&lt;p&gt;Por tanto, hay convergencia uniforme en &lt;script type=&quot;math/tex&quot;&gt;[a, b]&lt;/script&gt;.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\tag*{$\blacksquare$}&lt;/script&gt;

&lt;h2 id=&quot;referencias&quot;&gt;Referencias&lt;/h2&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:ejercicios&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.ugr.es/~fjperez/textos/sucesiones_series_funciones.pdf&quot;&gt;Ejercicios de sucesiones y series de funciones. Javier Pérez&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:ejercicios&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:medias&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://tux.ugr.es/dgiim/blog/2014/04/12/desigualdad-medias/&quot;&gt;La desigualdad de las medias. Mario Román&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:medias&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
            <pubDate>Mon, 20 Apr 2015 00:00:00 +0000</pubDate>
            <link>http://libreim.github.io/blog/2015/04/20/teorema-dini/</link>
            <guid isPermaLink="true">http://libreim.github.io/blog/2015/04/20/teorema-dini/</guid>
        </item>
        
    </channel>
</rss>
